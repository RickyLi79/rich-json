{
  "stats": {
    "suites": 19,
    "tests": 68,
    "passes": 68,
    "pending": 0,
    "failures": 0,
    "start": "2024-02-29T15:00:38.918Z",
    "end": "2024-02-29T15:00:38.967Z",
    "duration": 49,
    "testsRegistered": 68,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6e5e555b-97ac-4689-9b09-08afdc30d918",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8dab3f74-301d-4128-8f67-ad503a7d1edc",
          "title": "buildin serializers",
          "fullFile": "D:\\works\\ts-project\\json-rich-serialize\\test\\buildin-serializers.test.ts",
          "file": "\\test\\buildin-serializers.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"buildin serializers\"",
              "fullTitle": "buildin serializers \"before each\" hook in \"buildin serializers\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, lib_1.resetCustomerSerializers)();",
              "err": {},
              "uuid": "233e823a-ae02-4851-8ee2-d5864071d147",
              "parentUUID": "8dab3f74-301d-4128-8f67-ad503a7d1edc",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "50d7f442-163d-426a-a8f4-0e7b3a464436",
              "title": "Date",
              "fullFile": "D:\\works\\ts-project\\json-rich-serialize\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "buildin serializers Date plain",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Date();\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Date);",
                  "err": {},
                  "uuid": "ad40d6e0-da85-4715-9ebe-106465fb9f7c",
                  "parentUUID": "50d7f442-163d-426a-a8f4-0e7b3a464436",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "buildin serializers Date obj",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Date() };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Date);",
                  "err": {},
                  "uuid": "6b6f77c2-5fdb-4b37-bef7-29407fb81862",
                  "parentUUID": "50d7f442-163d-426a-a8f4-0e7b3a464436",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ad40d6e0-da85-4715-9ebe-106465fb9f7c",
                "6b6f77c2-5fdb-4b37-bef7-29407fb81862"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            },
            {
              "uuid": "5a266c81-148a-44f5-83f8-f2f8c29cc648",
              "title": "URL",
              "fullFile": "D:\\works\\ts-project\\json-rich-serialize\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "buildin serializers URL plain",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new URL('http://abc.def?q=1&3#213');\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, URL);",
                  "err": {},
                  "uuid": "385ec496-330b-4b70-989e-12de53db89b6",
                  "parentUUID": "5a266c81-148a-44f5-83f8-f2f8c29cc648",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "buildin serializers URL obj",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Date() };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Date);",
                  "err": {},
                  "uuid": "31784213-fed1-49e0-b723-2ea1d6c97591",
                  "parentUUID": "5a266c81-148a-44f5-83f8-f2f8c29cc648",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "385ec496-330b-4b70-989e-12de53db89b6",
                "31784213-fed1-49e0-b723-2ea1d6c97591"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            },
            {
              "uuid": "e2f1ab4f-dacc-45d5-b446-f0d4fa29981e",
              "title": "Error",
              "fullFile": "D:\\works\\ts-project\\json-rich-serialize\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "#1",
                  "fullTitle": "buildin serializers Error #1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Error('my message');\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.name, expect.name);\nchai_1.assert.deepEqual(actual.message, expect.message);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Error);",
                  "err": {},
                  "uuid": "5b884e42-c524-4f4a-aef4-6203b7e73866",
                  "parentUUID": "e2f1ab4f-dacc-45d5-b446-f0d4fa29981e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "#2",
                  "fullTitle": "buildin serializers Error #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let expect;\ntry {\n    ({}.a.b.c = 1);\n}\ncatch (e) {\n    expect = e;\n}\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.name, expect.name);\nchai_1.assert.deepEqual(actual.message, expect.message);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, TypeError);",
                  "err": {},
                  "uuid": "41eafc16-a55c-4254-b62f-dc48303644fc",
                  "parentUUID": "e2f1ab4f-dacc-45d5-b446-f0d4fa29981e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5b884e42-c524-4f4a-aef4-6203b7e73866",
                "41eafc16-a55c-4254-b62f-dc48303644fc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            },
            {
              "uuid": "597dab6e-052a-4ece-809e-81b31d6633fc",
              "title": "RegExp",
              "fullFile": "D:\\works\\ts-project\\json-rich-serialize\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain without flag",
                  "fullTitle": "buildin serializers RegExp plain without flag",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = /RegExp/;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, RegExp);",
                  "err": {},
                  "uuid": "9ff40b86-b9e3-44b7-a65e-66b59a763801",
                  "parentUUID": "597dab6e-052a-4ece-809e-81b31d6633fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain with flag",
                  "fullTitle": "buildin serializers RegExp plain with flag",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = /RegExp/ig;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, RegExp);",
                  "err": {},
                  "uuid": "c7968783-847a-4747-861c-4235f557d8e8",
                  "parentUUID": "597dab6e-052a-4ece-809e-81b31d6633fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "buildin serializers RegExp obj",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: /RegExp/ };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, RegExp);",
                  "err": {},
                  "uuid": "24ce7220-ab21-4ae5-b421-79ca3dc66c87",
                  "parentUUID": "597dab6e-052a-4ece-809e-81b31d6633fc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9ff40b86-b9e3-44b7-a65e-66b59a763801",
                "c7968783-847a-4747-861c-4235f557d8e8",
                "24ce7220-ab21-4ae5-b421-79ca3dc66c87"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            },
            {
              "uuid": "acb4c975-0a45-449d-b526-88b1934ba48b",
              "title": "Set",
              "fullFile": "D:\\works\\ts-project\\json-rich-serialize\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "buildin serializers Set plain",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Set([1, 2, 3]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Set);",
                  "err": {},
                  "uuid": "8a95b71d-e390-4d3e-a73a-85a404fd7dcd",
                  "parentUUID": "acb4c975-0a45-449d-b526-88b1934ba48b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "buildin serializers Set obj",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Set([1, 2, 3]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Set);",
                  "err": {},
                  "uuid": "0f417aef-e5e7-413f-9792-42b300399b68",
                  "parentUUID": "acb4c975-0a45-449d-b526-88b1934ba48b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8a95b71d-e390-4d3e-a73a-85a404fd7dcd",
                "0f417aef-e5e7-413f-9792-42b300399b68"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            },
            {
              "uuid": "90c23776-5c27-495b-8071-708eb09c4a13",
              "title": "Map",
              "fullFile": "D:\\works\\ts-project\\json-rich-serialize\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "buildin serializers Map plain",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Map([[1, 2], [3, 4]]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Map);",
                  "err": {},
                  "uuid": "e54bb5e4-ee5e-48a2-8d81-2f4ea303bfe5",
                  "parentUUID": "90c23776-5c27-495b-8071-708eb09c4a13",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "buildin serializers Map obj",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Map([[1, 2], [3, 4]]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Map);",
                  "err": {},
                  "uuid": "daccb7be-2a4d-409e-b984-3857bb8a1794",
                  "parentUUID": "90c23776-5c27-495b-8071-708eb09c4a13",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e54bb5e4-ee5e-48a2-8d81-2f4ea303bfe5",
                "daccb7be-2a4d-409e-b984-3857bb8a1794"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            },
            {
              "uuid": "183514c0-1448-46f1-b1b5-717780e025da",
              "title": "Function",
              "fullFile": "D:\\works\\ts-project\\json-rich-serialize\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain #1",
                  "fullTitle": "buildin serializers Function plain #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = function () { return 1; };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "ead741b0-648d-4441-b8c2-1aba8a8fd408",
                  "parentUUID": "183514c0-1448-46f1-b1b5-717780e025da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #1 async",
                  "fullTitle": "buildin serializers Function plain #1 async",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = async function () { return 1; };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "6739e40f-701e-40d9-a368-550fd9baea5f",
                  "parentUUID": "183514c0-1448-46f1-b1b5-717780e025da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #2",
                  "fullTitle": "buildin serializers Function plain #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = () => { 0; };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "5658d306-297c-4d54-9f69-471f6d78c950",
                  "parentUUID": "183514c0-1448-46f1-b1b5-717780e025da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #2 async",
                  "fullTitle": "buildin serializers Function plain #2 async",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = async () => { 0; };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "6cf59e32-6bad-4bd2-ac0d-4f33585386a5",
                  "parentUUID": "183514c0-1448-46f1-b1b5-717780e025da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #3",
                  "fullTitle": "buildin serializers Function plain #3",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = a => a;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "f1056883-09c1-4fa0-816c-8f2ce44453ac",
                  "parentUUID": "183514c0-1448-46f1-b1b5-717780e025da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #3 async",
                  "fullTitle": "buildin serializers Function plain #3 async",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = async (a) => a;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "81cd43bf-e29d-4258-8b0a-423c4e0969f5",
                  "parentUUID": "183514c0-1448-46f1-b1b5-717780e025da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #1",
                  "fullTitle": "buildin serializers Function obj #1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a() { return 1; } };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "d8e0dd36-172b-4c1a-ad10-c5c2dd8cc66e",
                  "parentUUID": "183514c0-1448-46f1-b1b5-717780e025da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #1 async",
                  "fullTitle": "buildin serializers Function obj #1 async",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { async a() { return 1; } };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "8cebcb0f-4a0e-47d7-bc90-1acbcd708638",
                  "parentUUID": "183514c0-1448-46f1-b1b5-717780e025da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #2",
                  "fullTitle": "buildin serializers Function obj #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: () => { 0; } };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "2e3f128c-53fb-4cd5-acb5-68c22ea30c24",
                  "parentUUID": "183514c0-1448-46f1-b1b5-717780e025da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #2 async",
                  "fullTitle": "buildin serializers Function obj #2 async",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: async () => { 0; } };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "f96eb360-c012-4c75-8842-cd01da5a6db0",
                  "parentUUID": "183514c0-1448-46f1-b1b5-717780e025da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #3",
                  "fullTitle": "buildin serializers Function obj #3",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: a => a };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "f7606fea-52ec-437f-8de6-8b1d070ce345",
                  "parentUUID": "183514c0-1448-46f1-b1b5-717780e025da",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #3 async",
                  "fullTitle": "buildin serializers Function obj #3 async",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: async (a) => a };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "3b6c319d-36db-4f50-8e43-4fc4099c3108",
                  "parentUUID": "183514c0-1448-46f1-b1b5-717780e025da",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ead741b0-648d-4441-b8c2-1aba8a8fd408",
                "6739e40f-701e-40d9-a368-550fd9baea5f",
                "5658d306-297c-4d54-9f69-471f6d78c950",
                "6cf59e32-6bad-4bd2-ac0d-4f33585386a5",
                "f1056883-09c1-4fa0-816c-8f2ce44453ac",
                "81cd43bf-e29d-4258-8b0a-423c4e0969f5",
                "d8e0dd36-172b-4c1a-ad10-c5c2dd8cc66e",
                "8cebcb0f-4a0e-47d7-bc90-1acbcd708638",
                "2e3f128c-53fb-4cd5-acb5-68c22ea30c24",
                "f96eb360-c012-4c75-8842-cd01da5a6db0",
                "f7606fea-52ec-437f-8de6-8b1d070ce345",
                "3b6c319d-36db-4f50-8e43-4fc4099c3108"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            },
            {
              "uuid": "4d58e290-d36a-4b3b-acee-47569ba02aa7",
              "title": "Buffer",
              "fullFile": "D:\\works\\ts-project\\json-rich-serialize\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain Buffer",
                  "fullTitle": "buildin serializers Buffer plain Buffer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Buffer.from([72, 101, 108, 108, 111]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Buffer);",
                  "err": {},
                  "uuid": "e543860e-859e-442a-963a-e89a40cf2f7b",
                  "parentUUID": "4d58e290-d36a-4b3b-acee-47569ba02aa7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain Uint8Array",
                  "fullTitle": "buildin serializers Buffer plain Uint8Array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Uint8Array([72, 101, 108, 108, 111]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Uint8Array);",
                  "err": {},
                  "uuid": "4a39c761-66df-49f5-be54-f2c95123e5a9",
                  "parentUUID": "4d58e290-d36a-4b3b-acee-47569ba02aa7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain Uint16Array",
                  "fullTitle": "buildin serializers Buffer plain Uint16Array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Uint16Array([72, 101, 108, 108, 111]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Uint16Array);",
                  "err": {},
                  "uuid": "899a846e-b4a5-43b2-beb3-99f4a316fdd3",
                  "parentUUID": "4d58e290-d36a-4b3b-acee-47569ba02aa7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain Uint32Array",
                  "fullTitle": "buildin serializers Buffer plain Uint32Array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Uint32Array([72, 101, 108, 108, 111]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Uint32Array);",
                  "err": {},
                  "uuid": "f50bd9a0-a0cc-4287-844e-ffff734d4725",
                  "parentUUID": "4d58e290-d36a-4b3b-acee-47569ba02aa7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain Int32Array",
                  "fullTitle": "buildin serializers Buffer plain Int32Array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Int32Array([72, 101, 108, 108, 111]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Int32Array);",
                  "err": {},
                  "uuid": "c74c0199-d358-4c2e-a6b8-c256edbb10fc",
                  "parentUUID": "4d58e290-d36a-4b3b-acee-47569ba02aa7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj Buffer",
                  "fullTitle": "buildin serializers Buffer obj Buffer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: Buffer.from([72, 101, 108, 108, 111]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Buffer);",
                  "err": {},
                  "uuid": "18cf929c-d4d8-4dbf-a183-1f9c1d6e93d7",
                  "parentUUID": "4d58e290-d36a-4b3b-acee-47569ba02aa7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj Uint8Array",
                  "fullTitle": "buildin serializers Buffer obj Uint8Array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Uint8Array([72, 101, 108, 108, 111]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Uint8Array);",
                  "err": {},
                  "uuid": "4d8081df-9ff6-41fc-af10-66b82ac8f2a9",
                  "parentUUID": "4d58e290-d36a-4b3b-acee-47569ba02aa7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj Uint16Array",
                  "fullTitle": "buildin serializers Buffer obj Uint16Array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Uint16Array([72, 101, 108, 108, 111]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Uint16Array);",
                  "err": {},
                  "uuid": "d45970b2-b7da-4d19-b96d-4ea42507ee15",
                  "parentUUID": "4d58e290-d36a-4b3b-acee-47569ba02aa7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj Uint32Array",
                  "fullTitle": "buildin serializers Buffer obj Uint32Array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Uint32Array([72, 101, 108, 108, 111]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Uint32Array);",
                  "err": {},
                  "uuid": "81f9fc3e-0c92-46a4-9e52-21f74defd00a",
                  "parentUUID": "4d58e290-d36a-4b3b-acee-47569ba02aa7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e543860e-859e-442a-963a-e89a40cf2f7b",
                "4a39c761-66df-49f5-be54-f2c95123e5a9",
                "899a846e-b4a5-43b2-beb3-99f4a316fdd3",
                "f50bd9a0-a0cc-4287-844e-ffff734d4725",
                "c74c0199-d358-4c2e-a6b8-c256edbb10fc",
                "18cf929c-d4d8-4dbf-a183-1f9c1d6e93d7",
                "4d8081df-9ff6-41fc-af10-66b82ac8f2a9",
                "d45970b2-b7da-4d19-b96d-4ea42507ee15",
                "81f9fc3e-0c92-46a4-9e52-21f74defd00a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            },
            {
              "uuid": "2a8c299c-7747-42c8-9f7b-fb19a0c152c5",
              "title": "WrapRunner",
              "fullFile": "D:\\works\\ts-project\\json-rich-serialize\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain #1",
                  "fullTitle": "buildin serializers WrapRunner plain #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "function add(a, b) {\n    return a + b;\n}\nconst expect = new WrapRunner_Serializer_1.WrapRunner(add, 1, 2);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.instanceOf(actual, WrapRunner_Serializer_1.WrapRunner);\nchai_1.assert.deepEqual(actual.run(), 3);",
                  "err": {},
                  "uuid": "7d8ce14f-2c1c-4eab-be22-41e79d3e568f",
                  "parentUUID": "2a8c299c-7747-42c8-9f7b-fb19a0c152c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #1 Promise",
                  "fullTitle": "buildin serializers WrapRunner plain #1 Promise",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "function add(a, b) {\n    return Promise.resolve(a + b);\n}\nconst expect = new WrapRunner_Serializer_1.WrapRunner(add, 1, 2);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.instanceOf(actual, WrapRunner_Serializer_1.WrapRunner);\nconst called = actual.run();\nchai_1.assert.instanceOf(called, Promise);\nchai_1.assert.deepEqual(await called, 3);",
                  "err": {},
                  "uuid": "cd14f8e1-7310-4aa4-87bb-ba63e38369c5",
                  "parentUUID": "2a8c299c-7747-42c8-9f7b-fb19a0c152c5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #2 whih `this`",
                  "fullTitle": "buildin serializers WrapRunner plain #2 whih `this`",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "function add(a, b) {\n    return (this ?? 0) + a + b;\n}\nconst expect = new WrapRunner_Serializer_1.WrapRunner(add, 1, 2);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.instanceOf(actual, WrapRunner_Serializer_1.WrapRunner);\nchai_1.assert.deepEqual(actual.run(), 3);\nchai_1.assert.deepEqual(actual.run(5), 8);\nchai_1.assert.deepEqual(actual.run(-1), 2);\n// assert.deepEqual(actual.call('0'), '012');",
                  "err": {},
                  "uuid": "ba6627fc-b116-4873-af41-a2f79ba535dc",
                  "parentUUID": "2a8c299c-7747-42c8-9f7b-fb19a0c152c5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7d8ce14f-2c1c-4eab-be22-41e79d3e568f",
                "cd14f8e1-7310-4aa4-87bb-ba63e38369c5",
                "ba6627fc-b116-4873-af41-a2f79ba535dc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "f0d03830-5a7b-4ba6-8be2-dc9b7ca5e690",
          "title": "complex",
          "fullFile": "D:\\works\\ts-project\\json-rich-serialize\\test\\complex.test.ts",
          "file": "\\test\\complex.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"complex\"",
              "fullTitle": "complex \"before each\" hook in \"complex\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, lib_1.resetCustomerSerializers)();",
              "err": {},
              "uuid": "411cd82b-af2c-43f8-a30c-8fa651741c90",
              "parentUUID": "f0d03830-5a7b-4ba6-8be2-dc9b7ca5e690",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"complex\"",
              "fullTitle": "complex \"before each\" hook in \"complex\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "actual = src_1.default.clone(expect);",
              "err": {},
              "uuid": "a2eb09c3-931f-426d-a669-85857b13daf7",
              "parentUUID": "f0d03830-5a7b-4ba6-8be2-dc9b7ca5e690",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "1dafabda-414d-451c-904c-b31ab22db738",
              "title": "circle",
              "fullFile": "D:\\works\\ts-project\\json-rich-serialize\\test\\complex.test.ts",
              "file": "\\test\\complex.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "root",
                  "fullTitle": "complex circle root",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.circle.root, actual);",
                  "err": {},
                  "uuid": "0fd502a1-02d4-4fda-923e-aa05a7e7f535",
                  "parentUUID": "1dafabda-414d-451c-904c-b31ab22db738",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "circle",
                  "fullTitle": "complex circle circle",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.circle.circle.circle, actual.circle);",
                  "err": {},
                  "uuid": "a74c9f3b-24fe-4dae-a60a-43fdc718024b",
                  "parentUUID": "1dafabda-414d-451c-904c-b31ab22db738",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0fd502a1-02d4-4fda-923e-aa05a7e7f535",
                "a74c9f3b-24fe-4dae-a60a-43fdc718024b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            },
            {
              "uuid": "84c102e6-a012-4e7b-8abb-efcc1b552a99",
              "title": "$ref",
              "fullFile": "D:\\works\\ts-project\\json-rich-serialize\\test\\complex.test.ts",
              "file": "\\test\\complex.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "function",
                  "fullTitle": "complex $ref function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.c, actual.c);",
                  "err": {},
                  "uuid": "be9257f0-788c-4f77-b8f5-0e6a7d9cd861",
                  "parentUUID": "84c102e6-a012-4e7b-8abb-efcc1b552a99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "object",
                  "fullTitle": "complex $ref object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.d, actual.d);\nchai_1.assert.notStrictEqual(actual.$ref.d, obj);",
                  "err": {},
                  "uuid": "1dc238d1-09eb-4976-b263-9e52d9360e60",
                  "parentUUID": "84c102e6-a012-4e7b-8abb-efcc1b552a99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "member of Set #1",
                  "fullTitle": "complex $ref member of Set #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.e, actual.e);\nconst value = Array.from(actual.$ref.e)[0];\nchai_1.assert.strictEqual(value, actual.d);",
                  "err": {},
                  "uuid": "f86edfb4-a013-4205-b54e-47073755475f",
                  "parentUUID": "84c102e6-a012-4e7b-8abb-efcc1b552a99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "member of Set #2",
                  "fullTitle": "complex $ref member of Set #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const value = Array.from(actual.$ref.g)[0];\nchai_1.assert.strictEqual(value, actual.g);",
                  "err": {},
                  "uuid": "8778ddbf-0d9a-4eda-8d59-b99ad6a325ce",
                  "parentUUID": "84c102e6-a012-4e7b-8abb-efcc1b552a99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "member of Map #1",
                  "fullTitle": "complex $ref member of Map #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.f, actual.f);\nconst key = Array.from(actual.$ref.f.entries())[0][0];\nchai_1.assert.strictEqual(key, actual.d);\nconst value = Array.from(actual.$ref.f.entries())[1][1];\nchai_1.assert.strictEqual(value, actual.d);",
                  "err": {},
                  "uuid": "f64e5b9a-377c-437f-be25-019bf7d6398d",
                  "parentUUID": "84c102e6-a012-4e7b-8abb-efcc1b552a99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "member of Map #2",
                  "fullTitle": "complex $ref member of Map #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = Array.from(actual.$ref.gg.entries())[0][0];\nchai_1.assert.strictEqual(key, actual.g);\nconst value = Array.from(actual.$ref.gg.entries())[1][1];\nchai_1.assert.strictEqual(value, actual.g);",
                  "err": {},
                  "uuid": "f38307f6-dcca-4d5f-8d14-f35aa745278c",
                  "parentUUID": "84c102e6-a012-4e7b-8abb-efcc1b552a99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "buffer",
                  "fullTitle": "complex $ref buffer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.h, actual.h);\nchai_1.assert.notStrictEqual(actual.$ref.h, buffer);",
                  "err": {},
                  "uuid": "519c3182-b883-4b96-bda0-6f16eba8bb5e",
                  "parentUUID": "84c102e6-a012-4e7b-8abb-efcc1b552a99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "class #1",
                  "fullTitle": "complex $ref class #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.g0, actual.g);\nchai_1.assert.notStrictEqual(actual.$ref.g0, obj2);",
                  "err": {},
                  "uuid": "2376594e-9d9b-40f2-85a8-e9b900e9f0ce",
                  "parentUUID": "84c102e6-a012-4e7b-8abb-efcc1b552a99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "class #2",
                  "fullTitle": "complex $ref class #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.g0.ref, actual.d);\nchai_1.assert.notStrictEqual(actual.$ref.g0.ref, obj2);",
                  "err": {},
                  "uuid": "b59180df-8621-4621-829e-16e1f3094f1a",
                  "parentUUID": "84c102e6-a012-4e7b-8abb-efcc1b552a99",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "class #3 - in Set",
                  "fullTitle": "complex $ref class #3 - in Set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.i, actual.i);\nconst value = Array.from(actual.$ref.i)[0];\nchai_1.assert.strictEqual(value, actual.g);\nchai_1.assert.strictEqual(value.ref, actual.d);",
                  "err": {},
                  "uuid": "db4dbb0e-4841-43d0-9ad0-7fbe69844ecf",
                  "parentUUID": "84c102e6-a012-4e7b-8abb-efcc1b552a99",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "be9257f0-788c-4f77-b8f5-0e6a7d9cd861",
                "1dc238d1-09eb-4976-b263-9e52d9360e60",
                "f86edfb4-a013-4205-b54e-47073755475f",
                "8778ddbf-0d9a-4eda-8d59-b99ad6a325ce",
                "f64e5b9a-377c-437f-be25-019bf7d6398d",
                "f38307f6-dcca-4d5f-8d14-f35aa745278c",
                "519c3182-b883-4b96-bda0-6f16eba8bb5e",
                "2376594e-9d9b-40f2-85a8-e9b900e9f0ce",
                "b59180df-8621-4621-829e-16e1f3094f1a",
                "db4dbb0e-4841-43d0-9ad0-7fbe69844ecf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "af7934c3-fe2d-4868-8d17-b24777baf421",
          "title": "customerSerializers",
          "fullFile": "D:\\works\\ts-project\\json-rich-serialize\\test\\customerSerializers.test.ts",
          "file": "\\test\\customerSerializers.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"customerSerializers\"",
              "fullTitle": "customerSerializers \"before each\" hook in \"customerSerializers\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, lib_1.resetCustomerSerializers)();",
              "err": {},
              "uuid": "56bec05c-5e9b-4578-a959-083e96f3c6c9",
              "parentUUID": "af7934c3-fe2d-4868-8d17-b24777baf421",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "base",
              "fullTitle": "customerSerializers base",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "src_1.default.addCustomerSerializer({\n    className: 'abc',\n    class: MyClass,\n    toContent: value => ({ abc: value.data }),\n    fromContent: json => {\n        return MyClass.create(json.abc);\n    },\n});\nconst acutal = src_1.default.clone(obj);\nconst expect = obj;\nchai_1.assert.deepEqual(acutal, expect);\nchai_1.assert.instanceOf(acutal.key5, MyClass);",
              "err": {},
              "uuid": "3c258824-c3b9-443c-aa76-fce2518980bc",
              "parentUUID": "af7934c3-fe2d-4868-8d17-b24777baf421",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "toJSON SHOULD NOT change after convert",
              "fullTitle": "customerSerializers toJSON SHOULD NOT change after convert",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let counter = 0;\nclass Clz {\n    data = 0;\n    toJSON() {\n        return counter++;\n    }\n}\nconst inst = new Clz();\ninst.data = 5;\nconst stage1 = JSON.stringify(inst);\nchai_1.assert.equal(counter, 1);\nchai_1.assert.equal('0', stage1);\nsrc_1.default.addCustomerSerializer({\n    class: Clz,\n    toContent: value => value.data,\n    fromContent: json => { const inst = new Clz(); inst.data = json; return inst; },\n});\nconst inst2 = src_1.default.clone(inst);\nchai_1.assert.equal(inst2.data, inst.data);\nchai_1.assert.notEqual(inst2.data, 0);\nchai_1.assert.equal(counter, 1);\nconst stage2 = JSON.stringify(inst);\nchai_1.assert.equal(counter, 2);\nchai_1.assert.equal('1', stage2);",
              "err": {},
              "uuid": "e7a747c9-078f-4220-8568-a00a40643b6e",
              "parentUUID": "af7934c3-fe2d-4868-8d17-b24777baf421",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SHOULD NOT add duplicate converter",
              "fullTitle": "customerSerializers SHOULD NOT add duplicate converter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "class Clz {\n}\nchai_1.assert.doesNotThrow(() => {\n    src_1.default.addCustomerSerializer({\n        class: Clz,\n        fromContent: null,\n        toContent: null,\n    });\n});\nchai_1.assert.Throw(() => {\n    src_1.default.addCustomerSerializer({\n        class: Clz,\n        fromContent: null,\n        toContent: null,\n    });\n});\nchai_1.assert.Throw(() => {\n    src_1.default.addCustomerSerializer({\n        className: 'Clz',\n        class: null,\n        fromContent: null,\n        toContent: null,\n    });\n});\nchai_1.assert.doesNotThrow(() => {\n    src_1.default.addCustomerSerializer({\n        className: 'Clz2',\n        class: Clz,\n        fromContent: null,\n        toContent: null,\n    });\n});",
              "err": {},
              "uuid": "fb2a10d5-f7ba-4475-a322-5a66876e0e2d",
              "parentUUID": "af7934c3-fe2d-4868-8d17-b24777baf421",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3c258824-c3b9-443c-aa76-fce2518980bc",
            "e7a747c9-078f-4220-8568-a00a40643b6e",
            "fb2a10d5-f7ba-4475-a322-5a66876e0e2d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "c4b7dcf9-abd4-46b7-914d-202a458a86ad",
          "title": "primitive",
          "fullFile": "D:\\works\\ts-project\\json-rich-serialize\\test\\primitive.test.ts",
          "file": "\\test\\primitive.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"primitive\"",
              "fullTitle": "primitive \"before each\" hook in \"primitive\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, lib_1.resetCustomerSerializers)();",
              "err": {},
              "uuid": "f422a9c4-7272-4832-b75c-4996d00964c3",
              "parentUUID": "c4b7dcf9-abd4-46b7-914d-202a458a86ad",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "2b8b902e-dc9e-4ea2-8862-139cba36b953",
              "title": "null",
              "fullFile": "D:\\works\\ts-project\\json-rich-serialize\\test\\primitive.test.ts",
              "file": "\\test\\primitive.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "primitive null plain",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = null;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "989c4e57-af00-475e-8d23-20eea215218d",
                  "parentUUID": "2b8b902e-dc9e-4ea2-8862-139cba36b953",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "primitive null obj",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: null };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);",
                  "err": {},
                  "uuid": "fde0ad0f-6e19-4f07-b0ce-f8fceda5e0d5",
                  "parentUUID": "2b8b902e-dc9e-4ea2-8862-139cba36b953",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "989c4e57-af00-475e-8d23-20eea215218d",
                "fde0ad0f-6e19-4f07-b0ce-f8fceda5e0d5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            },
            {
              "uuid": "505791ab-54eb-4bb3-889e-55aea9225df5",
              "title": "undefined",
              "fullFile": "D:\\works\\ts-project\\json-rich-serialize\\test\\primitive.test.ts",
              "file": "\\test\\primitive.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "primitive undefined plain",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = undefined;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "14243113-0c6f-4871-a963-b94c6ffc9007",
                  "parentUUID": "505791ab-54eb-4bb3-889e-55aea9225df5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "primitive undefined obj",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: undefined };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, {});\nchai_1.assert.notStrictEqual(actual, expect);",
                  "err": {},
                  "uuid": "8b16d6f0-7c2b-4d90-b9eb-c2560d736a56",
                  "parentUUID": "505791ab-54eb-4bb3-889e-55aea9225df5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "14243113-0c6f-4871-a963-b94c6ffc9007",
                "8b16d6f0-7c2b-4d90-b9eb-c2560d736a56"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            },
            {
              "uuid": "358d83ec-3df6-419d-a81d-38406467c902",
              "title": "bigint",
              "fullFile": "D:\\works\\ts-project\\json-rich-serialize\\test\\primitive.test.ts",
              "file": "\\test\\primitive.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "primitive bigint plain",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = 1n;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "68719f00-42f7-4b59-8173-730e680270cf",
                  "parentUUID": "358d83ec-3df6-419d-a81d-38406467c902",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "primitive bigint obj",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: 1n };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);",
                  "err": {},
                  "uuid": "f2b3ecaf-51de-477b-8c91-01e8949c97b0",
                  "parentUUID": "358d83ec-3df6-419d-a81d-38406467c902",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "68719f00-42f7-4b59-8173-730e680270cf",
                "f2b3ecaf-51de-477b-8c91-01e8949c97b0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            },
            {
              "uuid": "8fe87850-a2ae-469e-83b5-8cd2c905ffa0",
              "title": "number",
              "fullFile": "D:\\works\\ts-project\\json-rich-serialize\\test\\primitive.test.ts",
              "file": "\\test\\primitive.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "normal",
                  "fullTitle": "primitive number normal",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = 1;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "09d9ea3f-584d-4274-9914-002ab7aeb062",
                  "parentUUID": "8fe87850-a2ae-469e-83b5-8cd2c905ffa0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "NaN",
                  "fullTitle": "primitive number NaN",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number.NaN;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.isNaN(actual);",
                  "err": {},
                  "uuid": "217c8b4a-b981-4352-8ff5-f0fafc3bdd86",
                  "parentUUID": "8fe87850-a2ae-469e-83b5-8cd2c905ffa0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "-0",
                  "fullTitle": "primitive number -0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = -0;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notDeepEqual(actual, 0);",
                  "err": {},
                  "uuid": "3962a970-8d29-445b-b991-bd8d54f59deb",
                  "parentUUID": "8fe87850-a2ae-469e-83b5-8cd2c905ffa0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "EPSILON",
                  "fullTitle": "primitive number EPSILON",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "0193dccc-502e-477a-af6f-478ea7f24bcf",
                  "parentUUID": "8fe87850-a2ae-469e-83b5-8cd2c905ffa0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "MAX_SAFE_INTEGER",
                  "fullTitle": "primitive number MAX_SAFE_INTEGER",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "e744dc1f-4556-4e54-81e1-c1f62dcf50b7",
                  "parentUUID": "8fe87850-a2ae-469e-83b5-8cd2c905ffa0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "MAX_VALUE",
                  "fullTitle": "primitive number MAX_VALUE",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "34301e6d-5cd3-405d-b310-e5fd7d3ba812",
                  "parentUUID": "8fe87850-a2ae-469e-83b5-8cd2c905ffa0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "MIN_SAFE_INTEGER",
                  "fullTitle": "primitive number MIN_SAFE_INTEGER",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "042f8929-0523-40f3-914d-81510342562c",
                  "parentUUID": "8fe87850-a2ae-469e-83b5-8cd2c905ffa0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "MIN_VALUE",
                  "fullTitle": "primitive number MIN_VALUE",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "bf3fa7c2-c00f-4e9b-83ba-1495a9143575",
                  "parentUUID": "8fe87850-a2ae-469e-83b5-8cd2c905ffa0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "NEGATIVE_INFINITY",
                  "fullTitle": "primitive number NEGATIVE_INFINITY",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "42cb9ac4-5c1a-4760-9750-ff77f3942a73",
                  "parentUUID": "8fe87850-a2ae-469e-83b5-8cd2c905ffa0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "POSITIVE_INFINITY",
                  "fullTitle": "primitive number POSITIVE_INFINITY",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "f72a705f-e70d-41a4-a383-4a076cf2434b",
                  "parentUUID": "8fe87850-a2ae-469e-83b5-8cd2c905ffa0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "09d9ea3f-584d-4274-9914-002ab7aeb062",
                "217c8b4a-b981-4352-8ff5-f0fafc3bdd86",
                "3962a970-8d29-445b-b991-bd8d54f59deb",
                "0193dccc-502e-477a-af6f-478ea7f24bcf",
                "e744dc1f-4556-4e54-81e1-c1f62dcf50b7",
                "34301e6d-5cd3-405d-b310-e5fd7d3ba812",
                "042f8929-0523-40f3-914d-81510342562c",
                "bf3fa7c2-c00f-4e9b-83ba-1495a9143575",
                "42cb9ac4-5c1a-4760-9750-ff77f3942a73",
                "f72a705f-e70d-41a4-a383-4a076cf2434b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "doc",
        "reportTitle": "Rich-JSON",
        "reportPageTitle": "Rich-JSON-report",
        "reportFilename": "index",
        "autoOpen": "true"
      },
      "version": "6.2.0"
    }
  }
}