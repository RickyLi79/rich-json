{
  "stats": {
    "suites": 20,
    "tests": 72,
    "passes": 72,
    "pending": 0,
    "failures": 0,
    "start": "2024-03-07T15:19:06.748Z",
    "end": "2024-03-07T15:19:06.802Z",
    "duration": 54,
    "testsRegistered": 72,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9c6d534f-62a6-4d96-8a18-86502f2cdb57",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f982ae00-9c3f-44ea-8de0-2f290fab40a2",
          "title": "buildin serializers",
          "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
          "file": "\\test\\buildin-serializers.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"buildin serializers\"",
              "fullTitle": "buildin serializers \"before each\" hook in \"buildin serializers\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "src_1.default.resetCustomerSerializers();",
              "err": {},
              "uuid": "25b0760d-3c14-4cd3-81f6-70804c55078d",
              "parentUUID": "f982ae00-9c3f-44ea-8de0-2f290fab40a2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "e34abc6d-3c11-4f95-8238-901307c87360",
              "title": "Date",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "buildin serializers Date plain",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Date();\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Date);",
                  "err": {},
                  "uuid": "ae803bd4-ce9b-4dbb-ba94-803d4bd2f296",
                  "parentUUID": "e34abc6d-3c11-4f95-8238-901307c87360",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "buildin serializers Date obj",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Date() };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Date);",
                  "err": {},
                  "uuid": "f6874987-7656-4c61-9f36-d6a9236acf54",
                  "parentUUID": "e34abc6d-3c11-4f95-8238-901307c87360",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ae803bd4-ce9b-4dbb-ba94-803d4bd2f296",
                "f6874987-7656-4c61-9f36-d6a9236acf54"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5c789639-8353-4ea5-aead-b96db5cffafc",
              "title": "URL",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "buildin serializers URL plain",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new URL('http://abc.def?q=1&3#213');\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, URL);",
                  "err": {},
                  "uuid": "7e810816-c521-425e-bb71-551e91f13f9c",
                  "parentUUID": "5c789639-8353-4ea5-aead-b96db5cffafc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "buildin serializers URL obj",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Date() };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Date);",
                  "err": {},
                  "uuid": "bf511b6c-1703-46df-80b1-eb5d214034b0",
                  "parentUUID": "5c789639-8353-4ea5-aead-b96db5cffafc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7e810816-c521-425e-bb71-551e91f13f9c",
                "bf511b6c-1703-46df-80b1-eb5d214034b0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9e215286-643a-40c3-8a49-cdbf19ef2aa7",
              "title": "Error",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "#1",
                  "fullTitle": "buildin serializers Error #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Error('my message');\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.name, expect.name);\nchai_1.assert.deepEqual(actual.message, expect.message);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Error);",
                  "err": {},
                  "uuid": "373a79a3-257f-46de-88f4-c6a209549289",
                  "parentUUID": "9e215286-643a-40c3-8a49-cdbf19ef2aa7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "#2",
                  "fullTitle": "buildin serializers Error #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let expect;\ntry {\n    ({}.a.b.c = 1);\n}\ncatch (e) {\n    expect = e;\n}\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.name, expect.name);\nchai_1.assert.deepEqual(actual.message, expect.message);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, TypeError);",
                  "err": {},
                  "uuid": "b428d34f-9194-4f0f-bf8a-f703832c239e",
                  "parentUUID": "9e215286-643a-40c3-8a49-cdbf19ef2aa7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "373a79a3-257f-46de-88f4-c6a209549289",
                "b428d34f-9194-4f0f-bf8a-f703832c239e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d08cfc9f-f80a-4963-8c72-8d7a1ae5e933",
              "title": "RegExp",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain without flag",
                  "fullTitle": "buildin serializers RegExp plain without flag",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = /RegExp/;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, RegExp);",
                  "err": {},
                  "uuid": "e366911d-71f3-4ba6-9bcf-c75b40b394fa",
                  "parentUUID": "d08cfc9f-f80a-4963-8c72-8d7a1ae5e933",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain with flag",
                  "fullTitle": "buildin serializers RegExp plain with flag",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = /RegExp/ig;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, RegExp);",
                  "err": {},
                  "uuid": "4413e10e-c065-4e3d-bdf3-187b4ba9f1a6",
                  "parentUUID": "d08cfc9f-f80a-4963-8c72-8d7a1ae5e933",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "buildin serializers RegExp obj",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: /RegExp/ };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, RegExp);",
                  "err": {},
                  "uuid": "045a9702-3c3d-46eb-a159-22dc0eb72402",
                  "parentUUID": "d08cfc9f-f80a-4963-8c72-8d7a1ae5e933",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e366911d-71f3-4ba6-9bcf-c75b40b394fa",
                "4413e10e-c065-4e3d-bdf3-187b4ba9f1a6",
                "045a9702-3c3d-46eb-a159-22dc0eb72402"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "02eb058f-d056-4c3f-9af0-f2cdff03a921",
              "title": "Set",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "buildin serializers Set plain",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Set([1, 2, 3]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Set);",
                  "err": {},
                  "uuid": "20f0163d-5a01-4331-af6d-be5553cead19",
                  "parentUUID": "02eb058f-d056-4c3f-9af0-f2cdff03a921",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "buildin serializers Set obj",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Set([1, 2, 3]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Set);",
                  "err": {},
                  "uuid": "15e19207-e831-4dd8-8db9-e8dd74e5d5c2",
                  "parentUUID": "02eb058f-d056-4c3f-9af0-f2cdff03a921",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "20f0163d-5a01-4331-af6d-be5553cead19",
                "15e19207-e831-4dd8-8db9-e8dd74e5d5c2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6fbac301-15ff-40e9-ac8c-c591c0a40d34",
              "title": "Map",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "buildin serializers Map plain",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Map([[1, 2], [3, 4]]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Map);",
                  "err": {},
                  "uuid": "485dfe60-ce6a-4fa0-8104-fe84802ec5f4",
                  "parentUUID": "6fbac301-15ff-40e9-ac8c-c591c0a40d34",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "buildin serializers Map obj",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Map([[1, 2], [3, 4]]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Map);",
                  "err": {},
                  "uuid": "b08ca290-754e-42c9-be08-2e55cfc248bf",
                  "parentUUID": "6fbac301-15ff-40e9-ac8c-c591c0a40d34",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "485dfe60-ce6a-4fa0-8104-fe84802ec5f4",
                "b08ca290-754e-42c9-be08-2e55cfc248bf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ba580ffe-938e-494b-8728-db83d08d5311",
              "title": "Function",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain #1",
                  "fullTitle": "buildin serializers Function plain #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = function () { return 1; };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "0d8e17e6-e640-43d6-8775-9c6d8c02cc45",
                  "parentUUID": "ba580ffe-938e-494b-8728-db83d08d5311",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #1 async",
                  "fullTitle": "buildin serializers Function plain #1 async",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = async function () { return 1; };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "be3dd88b-8a4e-485a-97e3-66b87aa8105f",
                  "parentUUID": "ba580ffe-938e-494b-8728-db83d08d5311",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #2",
                  "fullTitle": "buildin serializers Function plain #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = () => { 0; };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "7bd29ede-49c5-43ee-ac88-6733844504d9",
                  "parentUUID": "ba580ffe-938e-494b-8728-db83d08d5311",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #2 async",
                  "fullTitle": "buildin serializers Function plain #2 async",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = async () => { 0; };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "c8ade84d-0c14-4d60-9ef1-aa58e23841b9",
                  "parentUUID": "ba580ffe-938e-494b-8728-db83d08d5311",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #3",
                  "fullTitle": "buildin serializers Function plain #3",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = (a) => a;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "08abac9c-cc45-4f03-bd70-1b258ab09cd9",
                  "parentUUID": "ba580ffe-938e-494b-8728-db83d08d5311",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #3 async",
                  "fullTitle": "buildin serializers Function plain #3 async",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = async (a) => a;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "c6100b9c-a1ef-41be-8331-f1c4cb662f9c",
                  "parentUUID": "ba580ffe-938e-494b-8728-db83d08d5311",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #1",
                  "fullTitle": "buildin serializers Function obj #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a() { return 1; } };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "def0391c-b08a-4e04-ae3e-c0a2bafd0304",
                  "parentUUID": "ba580ffe-938e-494b-8728-db83d08d5311",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #1 async",
                  "fullTitle": "buildin serializers Function obj #1 async",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { async a() { return 1; } };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "a3e55a86-76b1-4986-9e46-40ab817380af",
                  "parentUUID": "ba580ffe-938e-494b-8728-db83d08d5311",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #2",
                  "fullTitle": "buildin serializers Function obj #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: () => { 0; } };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "df8c48db-2d68-4b8e-836c-8a6312e5b0d4",
                  "parentUUID": "ba580ffe-938e-494b-8728-db83d08d5311",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #2 async",
                  "fullTitle": "buildin serializers Function obj #2 async",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: async () => { 0; } };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "dcfcb413-801a-4c9e-81f5-d4e21a7287bd",
                  "parentUUID": "ba580ffe-938e-494b-8728-db83d08d5311",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #3",
                  "fullTitle": "buildin serializers Function obj #3",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: (a) => a };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "8846677e-2adb-4a5d-a48a-accc34fe3f09",
                  "parentUUID": "ba580ffe-938e-494b-8728-db83d08d5311",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #3 async",
                  "fullTitle": "buildin serializers Function obj #3 async",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: async (a) => a };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "088d7058-faa0-41db-8b58-59171d9453a9",
                  "parentUUID": "ba580ffe-938e-494b-8728-db83d08d5311",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0d8e17e6-e640-43d6-8775-9c6d8c02cc45",
                "be3dd88b-8a4e-485a-97e3-66b87aa8105f",
                "7bd29ede-49c5-43ee-ac88-6733844504d9",
                "c8ade84d-0c14-4d60-9ef1-aa58e23841b9",
                "08abac9c-cc45-4f03-bd70-1b258ab09cd9",
                "c6100b9c-a1ef-41be-8331-f1c4cb662f9c",
                "def0391c-b08a-4e04-ae3e-c0a2bafd0304",
                "a3e55a86-76b1-4986-9e46-40ab817380af",
                "df8c48db-2d68-4b8e-836c-8a6312e5b0d4",
                "dcfcb413-801a-4c9e-81f5-d4e21a7287bd",
                "8846677e-2adb-4a5d-a48a-accc34fe3f09",
                "088d7058-faa0-41db-8b58-59171d9453a9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6fa8ea85-854a-4ef2-a00f-167fdbb62bff",
              "title": "Buffer",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain Buffer",
                  "fullTitle": "buildin serializers Buffer plain Buffer",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Buffer.from([72, 101, 108, 108, 111]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Buffer);",
                  "err": {},
                  "uuid": "734175e9-ab21-48cd-958a-0841ecefc167",
                  "parentUUID": "6fa8ea85-854a-4ef2-a00f-167fdbb62bff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain Uint8Array",
                  "fullTitle": "buildin serializers Buffer plain Uint8Array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Uint8Array([72, 101, 108, 108, 111]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Uint8Array);",
                  "err": {},
                  "uuid": "e635574c-f0a8-47ff-84c6-5cac2efbd6a8",
                  "parentUUID": "6fa8ea85-854a-4ef2-a00f-167fdbb62bff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain Uint16Array",
                  "fullTitle": "buildin serializers Buffer plain Uint16Array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Uint16Array([72, 101, 108, 108, 111]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Uint16Array);",
                  "err": {},
                  "uuid": "8646266e-574f-4eee-adba-aac3e75dc531",
                  "parentUUID": "6fa8ea85-854a-4ef2-a00f-167fdbb62bff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain Uint32Array",
                  "fullTitle": "buildin serializers Buffer plain Uint32Array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Uint32Array([72, 101, 108, 108, 111]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Uint32Array);",
                  "err": {},
                  "uuid": "009ee13e-ad94-4f79-a133-820ff5457d67",
                  "parentUUID": "6fa8ea85-854a-4ef2-a00f-167fdbb62bff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain Int32Array",
                  "fullTitle": "buildin serializers Buffer plain Int32Array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Int32Array([72, 101, 108, 108, 111]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Int32Array);",
                  "err": {},
                  "uuid": "2f87940a-1231-4e31-b704-beb9c9b33c8d",
                  "parentUUID": "6fa8ea85-854a-4ef2-a00f-167fdbb62bff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj Buffer",
                  "fullTitle": "buildin serializers Buffer obj Buffer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: Buffer.from([72, 101, 108, 108, 111]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Buffer);",
                  "err": {},
                  "uuid": "504b9c22-fb43-430c-990f-b579bc339d31",
                  "parentUUID": "6fa8ea85-854a-4ef2-a00f-167fdbb62bff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj Uint8Array",
                  "fullTitle": "buildin serializers Buffer obj Uint8Array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Uint8Array([72, 101, 108, 108, 111]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Uint8Array);",
                  "err": {},
                  "uuid": "2b8e6aa5-9662-4850-b997-8761c04cd74a",
                  "parentUUID": "6fa8ea85-854a-4ef2-a00f-167fdbb62bff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj Uint16Array",
                  "fullTitle": "buildin serializers Buffer obj Uint16Array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Uint16Array([72, 101, 108, 108, 111]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Uint16Array);",
                  "err": {},
                  "uuid": "13078803-43ba-4387-adbb-217af5d44a54",
                  "parentUUID": "6fa8ea85-854a-4ef2-a00f-167fdbb62bff",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj Uint32Array",
                  "fullTitle": "buildin serializers Buffer obj Uint32Array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Uint32Array([72, 101, 108, 108, 111]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Uint32Array);",
                  "err": {},
                  "uuid": "98ef2bea-7bb9-4e72-9424-7b6e5d59cc8e",
                  "parentUUID": "6fa8ea85-854a-4ef2-a00f-167fdbb62bff",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "734175e9-ab21-48cd-958a-0841ecefc167",
                "e635574c-f0a8-47ff-84c6-5cac2efbd6a8",
                "8646266e-574f-4eee-adba-aac3e75dc531",
                "009ee13e-ad94-4f79-a133-820ff5457d67",
                "2f87940a-1231-4e31-b704-beb9c9b33c8d",
                "504b9c22-fb43-430c-990f-b579bc339d31",
                "2b8e6aa5-9662-4850-b997-8761c04cd74a",
                "13078803-43ba-4387-adbb-217af5d44a54",
                "98ef2bea-7bb9-4e72-9424-7b6e5d59cc8e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cac42750-b173-46f6-a35d-2a442f4c37b2",
              "title": "WrapRunner",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain #1",
                  "fullTitle": "buildin serializers WrapRunner plain #1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "function add(a, b) {\n    return a + b;\n}\nconst expect = new src_1.default.WrapRunner(add, 1, 2);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.instanceOf(actual, src_1.default.WrapRunner);\nchai_1.assert.deepEqual(actual.run(), 3);",
                  "err": {},
                  "uuid": "17cc02b5-d431-4e67-b1e7-1a223d2a4d8f",
                  "parentUUID": "cac42750-b173-46f6-a35d-2a442f4c37b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #1 Promise",
                  "fullTitle": "buildin serializers WrapRunner plain #1 Promise",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "function add(a, b) {\n    return Promise.resolve(a + b);\n}\nconst expect = new src_1.default.WrapRunner(add, 1, 2);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.instanceOf(actual, src_1.default.WrapRunner);\nconst called = actual.run();\nchai_1.assert.instanceOf(called, Promise);\nchai_1.assert.deepEqual(await called, 3);",
                  "err": {},
                  "uuid": "71739556-5956-42e1-accf-41d5864313ce",
                  "parentUUID": "cac42750-b173-46f6-a35d-2a442f4c37b2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #2 whih `this`",
                  "fullTitle": "buildin serializers WrapRunner plain #2 whih `this`",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "function add(a, b) {\n    return (this ?? 0) + a + b;\n}\nconst expect = new src_1.default.WrapRunner(add, 1, 2);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.instanceOf(actual, src_1.default.WrapRunner);\nchai_1.assert.deepEqual(actual.run(), 3);\nchai_1.assert.deepEqual(actual.run(5), 8);\nchai_1.assert.deepEqual(actual.run(-1), 2);",
                  "err": {},
                  "uuid": "5d7f46f5-270e-4a0b-8ffe-b7c163041bac",
                  "parentUUID": "cac42750-b173-46f6-a35d-2a442f4c37b2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "17cc02b5-d431-4e67-b1e7-1a223d2a4d8f",
                "71739556-5956-42e1-accf-41d5864313ce",
                "5d7f46f5-270e-4a0b-8ffe-b7c163041bac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9cb9e343-b3fc-4db4-adba-d35ae180e5f8",
          "title": "complex",
          "fullFile": "D:\\works\\ts-project\\rich-json\\test\\complex.test.ts",
          "file": "\\test\\complex.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"complex\"",
              "fullTitle": "complex \"before each\" hook in \"complex\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "src_1.default.resetCustomerSerializers();\nsrc_1.default.addCustomerSerializer({\n    className: 'abc',\n    class: MyClass,\n    toContent: value => ({\n        abc: value.data,\n        xyz: value.ref,\n    }),\n    fromContent: ({ abc, xyz }) => {\n        return MyClass.create(abc, xyz);\n    },\n});",
              "err": {},
              "uuid": "8cb9a0f9-ee55-41c5-b290-063cbc5fe11c",
              "parentUUID": "9cb9e343-b3fc-4db4-adba-d35ae180e5f8",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"complex\"",
              "fullTitle": "complex \"before each\" hook in \"complex\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "actual = src_1.default.clone(expect);",
              "err": {},
              "uuid": "0eacaee8-c22f-4d10-bf50-4b37fe3ebe6d",
              "parentUUID": "9cb9e343-b3fc-4db4-adba-d35ae180e5f8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b43b1a75-d668-475a-a74f-fae6f8a440d0",
              "title": "circle",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\complex.test.ts",
              "file": "\\test\\complex.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "root",
                  "fullTitle": "complex circle root",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.circle.root, actual);",
                  "err": {},
                  "uuid": "8164b0e8-753f-4853-af61-af3089997f4f",
                  "parentUUID": "b43b1a75-d668-475a-a74f-fae6f8a440d0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "circle",
                  "fullTitle": "complex circle circle",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.circle.circle.circle, actual.circle);",
                  "err": {},
                  "uuid": "f9425823-6791-401a-8300-8e9b2e0d4884",
                  "parentUUID": "b43b1a75-d668-475a-a74f-fae6f8a440d0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8164b0e8-753f-4853-af61-af3089997f4f",
                "f9425823-6791-401a-8300-8e9b2e0d4884"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a7c43d8c-ee3a-42a1-8e7c-f556f75ce7a1",
              "title": "$ref",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\complex.test.ts",
              "file": "\\test\\complex.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "function",
                  "fullTitle": "complex $ref function",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.c, actual.c);",
                  "err": {},
                  "uuid": "9c867381-be28-40bd-b9c4-5be405e545ec",
                  "parentUUID": "a7c43d8c-ee3a-42a1-8e7c-f556f75ce7a1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "object",
                  "fullTitle": "complex $ref object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.d, actual.d);\nchai_1.assert.notStrictEqual(actual.$ref.d, obj);",
                  "err": {},
                  "uuid": "d3523143-d40f-473c-ab73-ccba0c32cad2",
                  "parentUUID": "a7c43d8c-ee3a-42a1-8e7c-f556f75ce7a1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "member of Set #1",
                  "fullTitle": "complex $ref member of Set #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.e, actual.e);\nconst value = Array.from(actual.$ref.e)[0];\nchai_1.assert.strictEqual(value, actual.d);",
                  "err": {},
                  "uuid": "77d67981-938a-44cf-ad15-4236e1c86cf8",
                  "parentUUID": "a7c43d8c-ee3a-42a1-8e7c-f556f75ce7a1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "member of Set #2",
                  "fullTitle": "complex $ref member of Set #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const value = Array.from(actual.$ref.g)[0];\nchai_1.assert.strictEqual(value, actual.g);",
                  "err": {},
                  "uuid": "8ca08ffa-118b-481f-b017-203a3ab907f7",
                  "parentUUID": "a7c43d8c-ee3a-42a1-8e7c-f556f75ce7a1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "member of Map #1",
                  "fullTitle": "complex $ref member of Map #1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.f, actual.f);\nconst key = Array.from(actual.$ref.f.entries())[0][0];\nchai_1.assert.strictEqual(key, actual.d);\nconst value = Array.from(actual.$ref.f.entries())[1][1];\nchai_1.assert.strictEqual(value, actual.d);",
                  "err": {},
                  "uuid": "4d0e08b1-354a-4c61-b6e7-3d68329626ac",
                  "parentUUID": "a7c43d8c-ee3a-42a1-8e7c-f556f75ce7a1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "member of Map #2",
                  "fullTitle": "complex $ref member of Map #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = Array.from(actual.$ref.gg.entries())[0][0];\nchai_1.assert.strictEqual(key, actual.g);\nconst value = Array.from(actual.$ref.gg.entries())[1][1];\nchai_1.assert.strictEqual(value, actual.g);",
                  "err": {},
                  "uuid": "e2aa9994-3661-43c1-af54-ec1afdd15b14",
                  "parentUUID": "a7c43d8c-ee3a-42a1-8e7c-f556f75ce7a1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "buffer",
                  "fullTitle": "complex $ref buffer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.h, actual.h);\nchai_1.assert.notStrictEqual(actual.$ref.h, buffer);",
                  "err": {},
                  "uuid": "7b788a57-0d5b-4f7b-96cd-172c206fc5db",
                  "parentUUID": "a7c43d8c-ee3a-42a1-8e7c-f556f75ce7a1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "class #1",
                  "fullTitle": "complex $ref class #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.g0, actual.g);\nchai_1.assert.notStrictEqual(actual.$ref.g0, obj2);",
                  "err": {},
                  "uuid": "3715a2be-8898-4e02-bf8d-d74ab07fa32e",
                  "parentUUID": "a7c43d8c-ee3a-42a1-8e7c-f556f75ce7a1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "class #2",
                  "fullTitle": "complex $ref class #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.g0.ref, actual.d);\nchai_1.assert.notStrictEqual(actual.$ref.g0.ref, obj2);",
                  "err": {},
                  "uuid": "549c3b5b-95df-4751-9e8c-69c897c5f5bb",
                  "parentUUID": "a7c43d8c-ee3a-42a1-8e7c-f556f75ce7a1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "class #3 - in Set",
                  "fullTitle": "complex $ref class #3 - in Set",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.i, actual.i);\nconst value = Array.from(actual.$ref.i)[0];\nchai_1.assert.strictEqual(value, actual.g);\nchai_1.assert.strictEqual(value.ref, actual.d);",
                  "err": {},
                  "uuid": "d185780b-38f1-447e-ab85-12a6d0af7165",
                  "parentUUID": "a7c43d8c-ee3a-42a1-8e7c-f556f75ce7a1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9c867381-be28-40bd-b9c4-5be405e545ec",
                "d3523143-d40f-473c-ab73-ccba0c32cad2",
                "77d67981-938a-44cf-ad15-4236e1c86cf8",
                "8ca08ffa-118b-481f-b017-203a3ab907f7",
                "4d0e08b1-354a-4c61-b6e7-3d68329626ac",
                "e2aa9994-3661-43c1-af54-ec1afdd15b14",
                "7b788a57-0d5b-4f7b-96cd-172c206fc5db",
                "3715a2be-8898-4e02-bf8d-d74ab07fa32e",
                "549c3b5b-95df-4751-9e8c-69c897c5f5bb",
                "d185780b-38f1-447e-ab85-12a6d0af7165"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "77b37184-72a8-4c10-8a86-64842635e254",
          "title": "customerSerializers",
          "fullFile": "D:\\works\\ts-project\\rich-json\\test\\customerSerializers.test.ts",
          "file": "\\test\\customerSerializers.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"customerSerializers\"",
              "fullTitle": "customerSerializers \"before each\" hook in \"customerSerializers\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "src_1.default.resetCustomerSerializers();",
              "err": {},
              "uuid": "8b668328-05ed-40d5-a22c-0ac916167f73",
              "parentUUID": "77b37184-72a8-4c10-8a86-64842635e254",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "base",
              "fullTitle": "customerSerializers base",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "src_1.default.addCustomerSerializer({\n    className: 'abc',\n    class: MyClass,\n    toContent: value => ({\n        abc: value.data,\n    }),\n    fromContent: json => {\n        return MyClass.create(json.abc);\n    },\n});\nconst acutal = src_1.default.clone(obj);\nconst expect = obj;\nchai_1.assert.deepEqual(acutal, expect);\nchai_1.assert.instanceOf(acutal.key5, MyClass);",
              "err": {},
              "uuid": "466036c6-75f4-485a-b806-756cb0459fb8",
              "parentUUID": "77b37184-72a8-4c10-8a86-64842635e254",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "toJSON SHOULD NOT change after convert",
              "fullTitle": "customerSerializers toJSON SHOULD NOT change after convert",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let counter = 0;\nclass Clz {\n    data = 0;\n    toJSON() {\n        return counter++;\n    }\n}\nconst inst = new Clz();\ninst.data = 5;\nconst stage1 = JSON.stringify(inst);\nchai_1.assert.equal(counter, 1);\nchai_1.assert.equal('0', stage1);\nsrc_1.default.addCustomerSerializer({\n    class: Clz,\n    toContent: value => value.data,\n    fromContent: json => { const inst = new Clz(); inst.data = json; return inst; },\n});\nconst inst2 = src_1.default.clone(inst);\nchai_1.assert.equal(inst2.data, inst.data);\nchai_1.assert.notEqual(inst2.data, 0);\nchai_1.assert.equal(counter, 1);\nconst stage2 = JSON.stringify(inst);\nchai_1.assert.equal(counter, 2);\nchai_1.assert.equal('1', stage2);",
              "err": {},
              "uuid": "e187b450-aa16-448f-b667-e020e9cd8603",
              "parentUUID": "77b37184-72a8-4c10-8a86-64842635e254",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SHOULD NOT add duplicate converter",
              "fullTitle": "customerSerializers SHOULD NOT add duplicate converter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "class Clz {\n}\nchai_1.assert.doesNotThrow(() => {\n    src_1.default.addCustomerSerializer({\n        class: Clz,\n        fromContent: null,\n        toContent: null,\n    });\n});\nchai_1.assert.Throw(() => {\n    src_1.default.addCustomerSerializer({\n        class: Clz,\n        fromContent: null,\n        toContent: null,\n    });\n});\nchai_1.assert.Throw(() => {\n    src_1.default.addCustomerSerializer({\n        className: 'Clz',\n        class: null,\n        fromContent: null,\n        toContent: null,\n    });\n});\nchai_1.assert.doesNotThrow(() => {\n    src_1.default.addCustomerSerializer({\n        className: 'Clz2',\n        class: Clz,\n        fromContent: null,\n        toContent: null,\n    });\n});",
              "err": {},
              "uuid": "9127b478-ace5-4abc-8487-e85eee6cf9f1",
              "parentUUID": "77b37184-72a8-4c10-8a86-64842635e254",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "466036c6-75f4-485a-b806-756cb0459fb8",
            "e187b450-aa16-448f-b667-e020e9cd8603",
            "9127b478-ace5-4abc-8487-e85eee6cf9f1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "86c90ca5-0166-44bc-90ab-858030b6a009",
          "title": "primitive",
          "fullFile": "D:\\works\\ts-project\\rich-json\\test\\primitive.test.ts",
          "file": "\\test\\primitive.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"primitive\"",
              "fullTitle": "primitive \"before each\" hook in \"primitive\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "src_1.default.resetCustomerSerializers();",
              "err": {},
              "uuid": "ff91322a-1e4d-4e8e-99c5-02e83ad879fd",
              "parentUUID": "86c90ca5-0166-44bc-90ab-858030b6a009",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b8ad4310-8c17-4369-8d66-d97c46738b21",
              "title": "null",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\primitive.test.ts",
              "file": "\\test\\primitive.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "primitive null plain",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = null;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "65d6022d-d4b2-4bc9-ba84-44d05a1d313f",
                  "parentUUID": "b8ad4310-8c17-4369-8d66-d97c46738b21",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "primitive null obj",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: null };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);",
                  "err": {},
                  "uuid": "2d0e7292-966b-4671-a121-8143905b3dcf",
                  "parentUUID": "b8ad4310-8c17-4369-8d66-d97c46738b21",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "65d6022d-d4b2-4bc9-ba84-44d05a1d313f",
                "2d0e7292-966b-4671-a121-8143905b3dcf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f0919ef3-9a77-4a89-a47b-79f97bdf4baf",
              "title": "undefined",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\primitive.test.ts",
              "file": "\\test\\primitive.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "primitive undefined plain",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = undefined;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "2d95df3d-c0a9-4bfb-a2c2-2564d29d5029",
                  "parentUUID": "f0919ef3-9a77-4a89-a47b-79f97bdf4baf",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "primitive undefined obj",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: undefined };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, {});\nchai_1.assert.notStrictEqual(actual, expect);",
                  "err": {},
                  "uuid": "a70b7f49-2297-4f83-af02-cb45a45f42b3",
                  "parentUUID": "f0919ef3-9a77-4a89-a47b-79f97bdf4baf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2d95df3d-c0a9-4bfb-a2c2-2564d29d5029",
                "a70b7f49-2297-4f83-af02-cb45a45f42b3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5c636b56-b775-4050-8051-c4936849a0f4",
              "title": "bigint",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\primitive.test.ts",
              "file": "\\test\\primitive.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "primitive bigint plain",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = 1n;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "18a79c32-3f1b-41f6-8aa4-09e2c03d52be",
                  "parentUUID": "5c636b56-b775-4050-8051-c4936849a0f4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "primitive bigint obj",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: 1n };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);",
                  "err": {},
                  "uuid": "cd98c2ae-067e-4496-8571-366903ec97cf",
                  "parentUUID": "5c636b56-b775-4050-8051-c4936849a0f4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "18a79c32-3f1b-41f6-8aa4-09e2c03d52be",
                "cd98c2ae-067e-4496-8571-366903ec97cf"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bac284ba-2f9e-482b-b552-ea0eddc12f7d",
              "title": "number",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\primitive.test.ts",
              "file": "\\test\\primitive.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "normal",
                  "fullTitle": "primitive number normal",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = 1;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "0a26e498-e0c0-4087-8808-c406b1193fbb",
                  "parentUUID": "bac284ba-2f9e-482b-b552-ea0eddc12f7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "NaN",
                  "fullTitle": "primitive number NaN",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number.NaN;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.isNaN(actual);",
                  "err": {},
                  "uuid": "da8d1a7c-b90e-4388-9f00-b72ea263ed14",
                  "parentUUID": "bac284ba-2f9e-482b-b552-ea0eddc12f7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "-0",
                  "fullTitle": "primitive number -0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = -0;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notDeepEqual(actual, 0);",
                  "err": {},
                  "uuid": "52e5385e-8463-4ae9-b5b4-1ef786d87399",
                  "parentUUID": "bac284ba-2f9e-482b-b552-ea0eddc12f7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "EPSILON",
                  "fullTitle": "primitive number EPSILON",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "212a298a-ac77-4632-8b7c-0de88dd10ba5",
                  "parentUUID": "bac284ba-2f9e-482b-b552-ea0eddc12f7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "MAX_SAFE_INTEGER",
                  "fullTitle": "primitive number MAX_SAFE_INTEGER",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "c484f74a-563b-4c33-9853-ba2752712e66",
                  "parentUUID": "bac284ba-2f9e-482b-b552-ea0eddc12f7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "MAX_VALUE",
                  "fullTitle": "primitive number MAX_VALUE",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "bc12c0f9-e5c1-4932-84e0-9ece8b57fd9c",
                  "parentUUID": "bac284ba-2f9e-482b-b552-ea0eddc12f7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "MIN_SAFE_INTEGER",
                  "fullTitle": "primitive number MIN_SAFE_INTEGER",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "4e683ca8-4e63-4081-8752-f7784e62d333",
                  "parentUUID": "bac284ba-2f9e-482b-b552-ea0eddc12f7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "MIN_VALUE",
                  "fullTitle": "primitive number MIN_VALUE",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "b2282a86-604a-4c7a-957f-3878d27a8e73",
                  "parentUUID": "bac284ba-2f9e-482b-b552-ea0eddc12f7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "NEGATIVE_INFINITY",
                  "fullTitle": "primitive number NEGATIVE_INFINITY",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "f4cd1e1b-33b1-48a7-ba3c-2d79a82a660e",
                  "parentUUID": "bac284ba-2f9e-482b-b552-ea0eddc12f7d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "POSITIVE_INFINITY",
                  "fullTitle": "primitive number POSITIVE_INFINITY",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "a8f23aea-82a6-4232-98d4-dce886967b42",
                  "parentUUID": "bac284ba-2f9e-482b-b552-ea0eddc12f7d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0a26e498-e0c0-4087-8808-c406b1193fbb",
                "da8d1a7c-b90e-4388-9f00-b72ea263ed14",
                "52e5385e-8463-4ae9-b5b4-1ef786d87399",
                "212a298a-ac77-4632-8b7c-0de88dd10ba5",
                "c484f74a-563b-4c33-9853-ba2752712e66",
                "bc12c0f9-e5c1-4932-84e0-9ece8b57fd9c",
                "4e683ca8-4e63-4081-8752-f7784e62d333",
                "b2282a86-604a-4c7a-957f-3878d27a8e73",
                "f4cd1e1b-33b1-48a7-ba3c-2d79a82a660e",
                "a8f23aea-82a6-4232-98d4-dce886967b42"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f5ced1c7-8878-4f24-a71f-0dd14ed20b9f",
          "title": "Stringify Options",
          "fullFile": "D:\\works\\ts-project\\rich-json\\test\\StringifyOptions.test.ts",
          "file": "\\test\\StringifyOptions.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "pretty",
              "fullTitle": "Stringify Options pretty",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = { a: 1, b: 5, c: { d: true, e: false } };\nconst pretty = 5;\nconst expect = JSON.stringify(obj, null, pretty);\nconst actual = src_1.default.stringify(obj, { pretty }).replace(/\\n {5}/g, '\\n');\nchai_1.assert.include(actual, expect);",
              "err": {},
              "uuid": "9c19be4f-5773-44d2-9f25-986091fc9419",
              "parentUUID": "f5ced1c7-8878-4f24-a71f-0dd14ed20b9f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "excludKeys string",
              "fullTitle": "Stringify Options excludKeys string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = { a: 1, b: 5, c: { d: true, e: false } };\nconst expect = { a: 1, c: { d: true } };\nconst actual = src_1.default.clone(obj, { excludKeys: ['b', 'e'] });\nchai_1.assert.deepEqual(actual, expect);",
              "err": {},
              "uuid": "a434480b-12db-4d00-94b1-e9d90e972f45",
              "parentUUID": "f5ced1c7-8878-4f24-a71f-0dd14ed20b9f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "excludKeys RegExp",
              "fullTitle": "Stringify Options excludKeys RegExp",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = { a: 1, b: 5, c: { d: true, e: false } };\nconst expect = { a: 1, c: { d: true } };\nconst actual = src_1.default.clone(obj, { excludKeys: /^b|e$/ });\nchai_1.assert.deepEqual(actual, expect);",
              "err": {},
              "uuid": "76731d08-05b8-4e42-8693-499be2538099",
              "parentUUID": "f5ced1c7-8878-4f24-a71f-0dd14ed20b9f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "excludKeys mix",
              "fullTitle": "Stringify Options excludKeys mix",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = { a: 1, b: 5, c: { d: true, e: false } };\nconst expect = { c: { d: true } };\nconst actual = src_1.default.clone(obj, { excludKeys: ['a', /^b|e$/] });\nchai_1.assert.deepEqual(actual, expect);",
              "err": {},
              "uuid": "f04e62af-cee5-49ca-94c5-fd48529aefd1",
              "parentUUID": "f5ced1c7-8878-4f24-a71f-0dd14ed20b9f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9c19be4f-5773-44d2-9f25-986091fc9419",
            "a434480b-12db-4d00-94b1-e9d90e972f45",
            "76731d08-05b8-4e42-8693-499be2538099",
            "f04e62af-cee5-49ca-94c5-fd48529aefd1"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "docs",
        "reportTitle": "Rich-JSON-1.1.1",
        "reportPageTitle": "Rich-JSON-report",
        "reportFilename": "index"
      },
      "version": "6.2.0"
    }
  }
}