{
  "stats": {
    "suites": 20,
    "tests": 72,
    "passes": 72,
    "pending": 0,
    "failures": 0,
    "start": "2024-03-07T16:51:36.782Z",
    "end": "2024-03-07T16:51:36.836Z",
    "duration": 54,
    "testsRegistered": 72,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8e4da18e-c629-4fdd-ba46-00a09bd54ea9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a304faea-8384-4d7c-b100-448a142cdedb",
          "title": "buildin serializers",
          "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
          "file": "\\test\\buildin-serializers.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"buildin serializers\"",
              "fullTitle": "buildin serializers \"before each\" hook in \"buildin serializers\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "src_1.default.resetCustomerSerializers();",
              "err": {},
              "uuid": "3219407d-1712-4154-b17d-a6a5aece55cf",
              "parentUUID": "a304faea-8384-4d7c-b100-448a142cdedb",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "95c6740c-ce33-4b7a-bb95-e2aadc472ef1",
              "title": "Date",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "buildin serializers Date plain",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Date();\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Date);",
                  "err": {},
                  "uuid": "c66cc04d-3fed-4306-8f13-2ac8bdb39cb1",
                  "parentUUID": "95c6740c-ce33-4b7a-bb95-e2aadc472ef1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "buildin serializers Date obj",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Date() };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Date);",
                  "err": {},
                  "uuid": "1559acfd-16d4-4d0d-bd8d-2c3eb692e78c",
                  "parentUUID": "95c6740c-ce33-4b7a-bb95-e2aadc472ef1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c66cc04d-3fed-4306-8f13-2ac8bdb39cb1",
                "1559acfd-16d4-4d0d-bd8d-2c3eb692e78c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9114a3cc-3e07-4dac-8eff-968ca0cb8d1b",
              "title": "URL",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "buildin serializers URL plain",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new URL('http://abc.def?q=1&3#213');\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, URL);",
                  "err": {},
                  "uuid": "40842183-2d7b-40bf-b004-fb0c9b812745",
                  "parentUUID": "9114a3cc-3e07-4dac-8eff-968ca0cb8d1b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "buildin serializers URL obj",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Date() };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Date);",
                  "err": {},
                  "uuid": "2a8ede2d-e605-499e-b07a-cd73b5e995a0",
                  "parentUUID": "9114a3cc-3e07-4dac-8eff-968ca0cb8d1b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "40842183-2d7b-40bf-b004-fb0c9b812745",
                "2a8ede2d-e605-499e-b07a-cd73b5e995a0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7b16b129-d6d6-4e55-83ab-8c103d3bc16c",
              "title": "Error",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "#1",
                  "fullTitle": "buildin serializers Error #1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Error('my message');\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.name, expect.name);\nchai_1.assert.deepEqual(actual.message, expect.message);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Error);",
                  "err": {},
                  "uuid": "4a45653c-5554-4add-8e86-0f8a714c457f",
                  "parentUUID": "7b16b129-d6d6-4e55-83ab-8c103d3bc16c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "#2",
                  "fullTitle": "buildin serializers Error #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let expect;\ntry {\n    ({}.a.b.c = 1);\n}\ncatch (e) {\n    expect = e;\n}\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.name, expect.name);\nchai_1.assert.deepEqual(actual.message, expect.message);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, TypeError);",
                  "err": {},
                  "uuid": "e8bbb0f5-f458-4ac4-8ca5-66be2698d00c",
                  "parentUUID": "7b16b129-d6d6-4e55-83ab-8c103d3bc16c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4a45653c-5554-4add-8e86-0f8a714c457f",
                "e8bbb0f5-f458-4ac4-8ca5-66be2698d00c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1c170c38-15f4-4f56-9785-76e3349e080a",
              "title": "RegExp",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain without flag",
                  "fullTitle": "buildin serializers RegExp plain without flag",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = /RegExp/;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, RegExp);",
                  "err": {},
                  "uuid": "6c1e53ef-2c91-4366-af94-276065150c1a",
                  "parentUUID": "1c170c38-15f4-4f56-9785-76e3349e080a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain with flag",
                  "fullTitle": "buildin serializers RegExp plain with flag",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = /RegExp/ig;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, RegExp);",
                  "err": {},
                  "uuid": "9c000f5d-9414-4c1c-bcc4-e5b0d7abe54d",
                  "parentUUID": "1c170c38-15f4-4f56-9785-76e3349e080a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "buildin serializers RegExp obj",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: /RegExp/ };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, RegExp);",
                  "err": {},
                  "uuid": "5945b49f-07f0-44e3-8077-494e40170924",
                  "parentUUID": "1c170c38-15f4-4f56-9785-76e3349e080a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6c1e53ef-2c91-4366-af94-276065150c1a",
                "9c000f5d-9414-4c1c-bcc4-e5b0d7abe54d",
                "5945b49f-07f0-44e3-8077-494e40170924"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a3365eac-c799-4f37-9f0a-38f4d9325022",
              "title": "Set",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "buildin serializers Set plain",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Set([1, 2, 3]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Set);",
                  "err": {},
                  "uuid": "55cb09af-5329-40f1-a692-023faa69c3c2",
                  "parentUUID": "a3365eac-c799-4f37-9f0a-38f4d9325022",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "buildin serializers Set obj",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Set([1, 2, 3]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Set);",
                  "err": {},
                  "uuid": "647d8e29-8f37-406d-b055-5c9ff740d377",
                  "parentUUID": "a3365eac-c799-4f37-9f0a-38f4d9325022",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "55cb09af-5329-40f1-a692-023faa69c3c2",
                "647d8e29-8f37-406d-b055-5c9ff740d377"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1a1af7a3-c934-42f9-bfb8-bd486bef2c62",
              "title": "Map",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "buildin serializers Map plain",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Map([[1, 2], [3, 4]]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Map);",
                  "err": {},
                  "uuid": "dcef0088-dfc7-489c-85a5-1b17569c599a",
                  "parentUUID": "1a1af7a3-c934-42f9-bfb8-bd486bef2c62",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "buildin serializers Map obj",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Map([[1, 2], [3, 4]]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Map);",
                  "err": {},
                  "uuid": "abdbad29-e6d8-4ecd-90b7-49935eb97c54",
                  "parentUUID": "1a1af7a3-c934-42f9-bfb8-bd486bef2c62",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dcef0088-dfc7-489c-85a5-1b17569c599a",
                "abdbad29-e6d8-4ecd-90b7-49935eb97c54"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "752b43e0-407c-4071-94bc-1a96f54efc85",
              "title": "Function",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain #1",
                  "fullTitle": "buildin serializers Function plain #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = function () { return 1; };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "042e728b-a7e7-4e29-820a-c9fe2df112d8",
                  "parentUUID": "752b43e0-407c-4071-94bc-1a96f54efc85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #1 async",
                  "fullTitle": "buildin serializers Function plain #1 async",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = async function () { return 1; };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "b6015603-21bc-4b8f-be74-40130b55cf9a",
                  "parentUUID": "752b43e0-407c-4071-94bc-1a96f54efc85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #2",
                  "fullTitle": "buildin serializers Function plain #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = () => { 0; };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "b3567eef-9ced-4f04-aa98-1f0f719500b4",
                  "parentUUID": "752b43e0-407c-4071-94bc-1a96f54efc85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #2 async",
                  "fullTitle": "buildin serializers Function plain #2 async",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = async () => { 0; };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "4af316f2-aa60-46bd-9f6f-5d379189a551",
                  "parentUUID": "752b43e0-407c-4071-94bc-1a96f54efc85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #3",
                  "fullTitle": "buildin serializers Function plain #3",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = (a) => a;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "7ff4e627-a0d4-4358-bb3c-3e22cf1b924b",
                  "parentUUID": "752b43e0-407c-4071-94bc-1a96f54efc85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #3 async",
                  "fullTitle": "buildin serializers Function plain #3 async",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = async (a) => a;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "0a23854e-64df-4814-97bf-e1c0ddb56c4b",
                  "parentUUID": "752b43e0-407c-4071-94bc-1a96f54efc85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #1",
                  "fullTitle": "buildin serializers Function obj #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a() { return 1; } };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "c0dec3e1-597d-4758-aa04-31970d961381",
                  "parentUUID": "752b43e0-407c-4071-94bc-1a96f54efc85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #1 async",
                  "fullTitle": "buildin serializers Function obj #1 async",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { async a() { return 1; } };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "22880c4f-56ad-47ae-86db-13d213d30978",
                  "parentUUID": "752b43e0-407c-4071-94bc-1a96f54efc85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #2",
                  "fullTitle": "buildin serializers Function obj #2",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: () => { 0; } };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "822cb47f-821f-48d8-8f9b-09a42d593d06",
                  "parentUUID": "752b43e0-407c-4071-94bc-1a96f54efc85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #2 async",
                  "fullTitle": "buildin serializers Function obj #2 async",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: async () => { 0; } };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "d0b1040c-595c-48f6-aef6-42682a0980b5",
                  "parentUUID": "752b43e0-407c-4071-94bc-1a96f54efc85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #3",
                  "fullTitle": "buildin serializers Function obj #3",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: (a) => a };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "704cda40-6467-4082-996a-026a7ae8b64a",
                  "parentUUID": "752b43e0-407c-4071-94bc-1a96f54efc85",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #3 async",
                  "fullTitle": "buildin serializers Function obj #3 async",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: async (a) => a };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "4b7bd3d3-4236-4db8-89a4-8c27e604c6c3",
                  "parentUUID": "752b43e0-407c-4071-94bc-1a96f54efc85",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "042e728b-a7e7-4e29-820a-c9fe2df112d8",
                "b6015603-21bc-4b8f-be74-40130b55cf9a",
                "b3567eef-9ced-4f04-aa98-1f0f719500b4",
                "4af316f2-aa60-46bd-9f6f-5d379189a551",
                "7ff4e627-a0d4-4358-bb3c-3e22cf1b924b",
                "0a23854e-64df-4814-97bf-e1c0ddb56c4b",
                "c0dec3e1-597d-4758-aa04-31970d961381",
                "22880c4f-56ad-47ae-86db-13d213d30978",
                "822cb47f-821f-48d8-8f9b-09a42d593d06",
                "d0b1040c-595c-48f6-aef6-42682a0980b5",
                "704cda40-6467-4082-996a-026a7ae8b64a",
                "4b7bd3d3-4236-4db8-89a4-8c27e604c6c3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "23e3925c-ecd9-48f0-8998-23f3476a0a06",
              "title": "Buffer",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain Buffer",
                  "fullTitle": "buildin serializers Buffer plain Buffer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Buffer.from([72, 101, 108, 108, 111]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Buffer);",
                  "err": {},
                  "uuid": "82e1adf9-d1ab-47d8-a7db-c6d2fe44ae8a",
                  "parentUUID": "23e3925c-ecd9-48f0-8998-23f3476a0a06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain Uint8Array",
                  "fullTitle": "buildin serializers Buffer plain Uint8Array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Uint8Array([72, 101, 108, 108, 111]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Uint8Array);",
                  "err": {},
                  "uuid": "60175463-7f99-4945-b328-34e86e8fee40",
                  "parentUUID": "23e3925c-ecd9-48f0-8998-23f3476a0a06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain Uint16Array",
                  "fullTitle": "buildin serializers Buffer plain Uint16Array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Uint16Array([72, 101, 108, 108, 111]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Uint16Array);",
                  "err": {},
                  "uuid": "74c43156-9e6f-42b1-bd26-db0363616243",
                  "parentUUID": "23e3925c-ecd9-48f0-8998-23f3476a0a06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain Uint32Array",
                  "fullTitle": "buildin serializers Buffer plain Uint32Array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Uint32Array([72, 101, 108, 108, 111]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Uint32Array);",
                  "err": {},
                  "uuid": "82121d7e-7381-4e66-8726-e300cbadd966",
                  "parentUUID": "23e3925c-ecd9-48f0-8998-23f3476a0a06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain Int32Array",
                  "fullTitle": "buildin serializers Buffer plain Int32Array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Int32Array([72, 101, 108, 108, 111]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Int32Array);",
                  "err": {},
                  "uuid": "49252f98-c17d-4ea9-9914-aedb7de1858b",
                  "parentUUID": "23e3925c-ecd9-48f0-8998-23f3476a0a06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj Buffer",
                  "fullTitle": "buildin serializers Buffer obj Buffer",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: Buffer.from([72, 101, 108, 108, 111]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Buffer);",
                  "err": {},
                  "uuid": "96308c70-924d-4494-9ebf-f79505162a8c",
                  "parentUUID": "23e3925c-ecd9-48f0-8998-23f3476a0a06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj Uint8Array",
                  "fullTitle": "buildin serializers Buffer obj Uint8Array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Uint8Array([72, 101, 108, 108, 111]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Uint8Array);",
                  "err": {},
                  "uuid": "2c54a352-5942-46e7-9b2d-daf11a904891",
                  "parentUUID": "23e3925c-ecd9-48f0-8998-23f3476a0a06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj Uint16Array",
                  "fullTitle": "buildin serializers Buffer obj Uint16Array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Uint16Array([72, 101, 108, 108, 111]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Uint16Array);",
                  "err": {},
                  "uuid": "c7013e9e-5e07-424f-aeb4-001cec928d30",
                  "parentUUID": "23e3925c-ecd9-48f0-8998-23f3476a0a06",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj Uint32Array",
                  "fullTitle": "buildin serializers Buffer obj Uint32Array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Uint32Array([72, 101, 108, 108, 111]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Uint32Array);",
                  "err": {},
                  "uuid": "7043642f-a003-480a-bc47-efb3e0afbe47",
                  "parentUUID": "23e3925c-ecd9-48f0-8998-23f3476a0a06",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "82e1adf9-d1ab-47d8-a7db-c6d2fe44ae8a",
                "60175463-7f99-4945-b328-34e86e8fee40",
                "74c43156-9e6f-42b1-bd26-db0363616243",
                "82121d7e-7381-4e66-8726-e300cbadd966",
                "49252f98-c17d-4ea9-9914-aedb7de1858b",
                "96308c70-924d-4494-9ebf-f79505162a8c",
                "2c54a352-5942-46e7-9b2d-daf11a904891",
                "c7013e9e-5e07-424f-aeb4-001cec928d30",
                "7043642f-a003-480a-bc47-efb3e0afbe47"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1c125770-ac6e-4606-bb09-0e5140fc90a3",
              "title": "WrapRunner",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain #1",
                  "fullTitle": "buildin serializers WrapRunner plain #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "function add(a, b) {\n    return a + b;\n}\nconst expect = new src_1.default.WrapRunner(add, 1, 2);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.instanceOf(actual, src_1.default.WrapRunner);\nchai_1.assert.deepEqual(actual.run(), 3);",
                  "err": {},
                  "uuid": "5f834c0c-b3c2-44fc-bc21-d125f4622dad",
                  "parentUUID": "1c125770-ac6e-4606-bb09-0e5140fc90a3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #1 Promise",
                  "fullTitle": "buildin serializers WrapRunner plain #1 Promise",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "function add(a, b) {\n    return Promise.resolve(a + b);\n}\nconst expect = new src_1.default.WrapRunner(add, 1, 2);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.instanceOf(actual, src_1.default.WrapRunner);\nconst called = actual.run();\nchai_1.assert.instanceOf(called, Promise);\nchai_1.assert.deepEqual(await called, 3);",
                  "err": {},
                  "uuid": "929fc6cf-134f-4995-9029-c11a8aafe7a9",
                  "parentUUID": "1c125770-ac6e-4606-bb09-0e5140fc90a3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #2 whih `this`",
                  "fullTitle": "buildin serializers WrapRunner plain #2 whih `this`",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "function add(a, b) {\n    return (this ?? 0) + a + b;\n}\nconst expect = new src_1.default.WrapRunner(add, 1, 2);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.instanceOf(actual, src_1.default.WrapRunner);\nchai_1.assert.deepEqual(actual.run(), 3);\nchai_1.assert.deepEqual(actual.run(5), 8);\nchai_1.assert.deepEqual(actual.run(-1), 2);",
                  "err": {},
                  "uuid": "eeb9856b-def2-4422-a43a-f0dbb08bcf48",
                  "parentUUID": "1c125770-ac6e-4606-bb09-0e5140fc90a3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f834c0c-b3c2-44fc-bc21-d125f4622dad",
                "929fc6cf-134f-4995-9029-c11a8aafe7a9",
                "eeb9856b-def2-4422-a43a-f0dbb08bcf48"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ededd191-9c99-43d6-b4fb-5cad3e4735a9",
          "title": "complex",
          "fullFile": "D:\\works\\ts-project\\rich-json\\test\\complex.test.ts",
          "file": "\\test\\complex.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"complex\"",
              "fullTitle": "complex \"before each\" hook in \"complex\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "src_1.default.resetCustomerSerializers();\nsrc_1.default.addCustomerSerializer({\n    className: 'abc',\n    class: MyClass,\n    toContent: value => ({\n        abc: value.data,\n        xyz: value.ref,\n    }),\n    fromContent: ({ abc, xyz }) => {\n        return MyClass.create(abc, xyz);\n    },\n});",
              "err": {},
              "uuid": "1cd17ab7-3ff6-4318-80c5-10cd755c5360",
              "parentUUID": "ededd191-9c99-43d6-b4fb-5cad3e4735a9",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"complex\"",
              "fullTitle": "complex \"before each\" hook in \"complex\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "actual = src_1.default.clone(expect);",
              "err": {},
              "uuid": "d8191bc4-0e88-46f2-8d47-5a760977c515",
              "parentUUID": "ededd191-9c99-43d6-b4fb-5cad3e4735a9",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ac0f6f6a-60d9-4fff-a7a5-6d495627625a",
              "title": "circle",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\complex.test.ts",
              "file": "\\test\\complex.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "root",
                  "fullTitle": "complex circle root",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.circle.root, actual);",
                  "err": {},
                  "uuid": "dad5bb75-b3c9-4f56-945d-70801c097a1c",
                  "parentUUID": "ac0f6f6a-60d9-4fff-a7a5-6d495627625a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "circle",
                  "fullTitle": "complex circle circle",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.circle.circle.circle, actual.circle);",
                  "err": {},
                  "uuid": "9bfc6a4e-65dc-4bf5-ae38-3b3abc817ba9",
                  "parentUUID": "ac0f6f6a-60d9-4fff-a7a5-6d495627625a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dad5bb75-b3c9-4f56-945d-70801c097a1c",
                "9bfc6a4e-65dc-4bf5-ae38-3b3abc817ba9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e81edca8-3f84-45a4-bc87-b8add2a7772e",
              "title": "$ref",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\complex.test.ts",
              "file": "\\test\\complex.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "function",
                  "fullTitle": "complex $ref function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.c, actual.c);",
                  "err": {},
                  "uuid": "3e8ace0d-df1d-4d0f-a79a-e4419c766ca7",
                  "parentUUID": "e81edca8-3f84-45a4-bc87-b8add2a7772e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "object",
                  "fullTitle": "complex $ref object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.d, actual.d);\nchai_1.assert.notStrictEqual(actual.$ref.d, obj);",
                  "err": {},
                  "uuid": "7d9bcc33-99e7-4d34-a0c9-1f3a86549924",
                  "parentUUID": "e81edca8-3f84-45a4-bc87-b8add2a7772e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "member of Set #1",
                  "fullTitle": "complex $ref member of Set #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.e, actual.e);\nconst value = Array.from(actual.$ref.e)[0];\nchai_1.assert.strictEqual(value, actual.d);",
                  "err": {},
                  "uuid": "0322a598-d050-4fa1-888b-b8cfbeda1353",
                  "parentUUID": "e81edca8-3f84-45a4-bc87-b8add2a7772e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "member of Set #2",
                  "fullTitle": "complex $ref member of Set #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const value = Array.from(actual.$ref.g)[0];\nchai_1.assert.strictEqual(value, actual.g);",
                  "err": {},
                  "uuid": "d4c85908-f5c4-40db-b008-f44955186f43",
                  "parentUUID": "e81edca8-3f84-45a4-bc87-b8add2a7772e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "member of Map #1",
                  "fullTitle": "complex $ref member of Map #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.f, actual.f);\nconst key = Array.from(actual.$ref.f.entries())[0][0];\nchai_1.assert.strictEqual(key, actual.d);\nconst value = Array.from(actual.$ref.f.entries())[1][1];\nchai_1.assert.strictEqual(value, actual.d);",
                  "err": {},
                  "uuid": "5d836d20-a839-418e-a666-2f691f00d6e4",
                  "parentUUID": "e81edca8-3f84-45a4-bc87-b8add2a7772e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "member of Map #2",
                  "fullTitle": "complex $ref member of Map #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = Array.from(actual.$ref.gg.entries())[0][0];\nchai_1.assert.strictEqual(key, actual.g);\nconst value = Array.from(actual.$ref.gg.entries())[1][1];\nchai_1.assert.strictEqual(value, actual.g);",
                  "err": {},
                  "uuid": "f86ce78b-11ab-452c-bcf3-820ca51786bb",
                  "parentUUID": "e81edca8-3f84-45a4-bc87-b8add2a7772e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "buffer",
                  "fullTitle": "complex $ref buffer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.h, actual.h);\nchai_1.assert.notStrictEqual(actual.$ref.h, buffer);",
                  "err": {},
                  "uuid": "23a73894-4de3-415d-9b08-aba947c4ffdb",
                  "parentUUID": "e81edca8-3f84-45a4-bc87-b8add2a7772e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "class #1",
                  "fullTitle": "complex $ref class #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.g0, actual.g);\nchai_1.assert.notStrictEqual(actual.$ref.g0, obj2);",
                  "err": {},
                  "uuid": "35eb7a3d-a912-43e4-bf5b-70d95f59384b",
                  "parentUUID": "e81edca8-3f84-45a4-bc87-b8add2a7772e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "class #2",
                  "fullTitle": "complex $ref class #2",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.g0.ref, actual.d);\nchai_1.assert.notStrictEqual(actual.$ref.g0.ref, obj2);",
                  "err": {},
                  "uuid": "5df2d82e-e037-4951-b140-913ea0fb43c7",
                  "parentUUID": "e81edca8-3f84-45a4-bc87-b8add2a7772e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "class #3 - in Set",
                  "fullTitle": "complex $ref class #3 - in Set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.i, actual.i);\nconst value = Array.from(actual.$ref.i)[0];\nchai_1.assert.strictEqual(value, actual.g);\nchai_1.assert.strictEqual(value.ref, actual.d);",
                  "err": {},
                  "uuid": "3075996b-e91e-4906-9f01-14234b7b498f",
                  "parentUUID": "e81edca8-3f84-45a4-bc87-b8add2a7772e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3e8ace0d-df1d-4d0f-a79a-e4419c766ca7",
                "7d9bcc33-99e7-4d34-a0c9-1f3a86549924",
                "0322a598-d050-4fa1-888b-b8cfbeda1353",
                "d4c85908-f5c4-40db-b008-f44955186f43",
                "5d836d20-a839-418e-a666-2f691f00d6e4",
                "f86ce78b-11ab-452c-bcf3-820ca51786bb",
                "23a73894-4de3-415d-9b08-aba947c4ffdb",
                "35eb7a3d-a912-43e4-bf5b-70d95f59384b",
                "5df2d82e-e037-4951-b140-913ea0fb43c7",
                "3075996b-e91e-4906-9f01-14234b7b498f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "56cf91f2-db7b-4634-889a-eda40854e1a7",
          "title": "customerSerializers",
          "fullFile": "D:\\works\\ts-project\\rich-json\\test\\customerSerializers.test.ts",
          "file": "\\test\\customerSerializers.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"customerSerializers\"",
              "fullTitle": "customerSerializers \"before each\" hook in \"customerSerializers\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "src_1.default.resetCustomerSerializers();",
              "err": {},
              "uuid": "006d8f14-4d03-496f-a66a-65729aca4e34",
              "parentUUID": "56cf91f2-db7b-4634-889a-eda40854e1a7",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "base",
              "fullTitle": "customerSerializers base",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "src_1.default.addCustomerSerializer({\n    className: 'abc',\n    class: MyClass,\n    toContent: value => ({\n        abc: value.data,\n    }),\n    fromContent: json => {\n        return MyClass.create(json.abc);\n    },\n});\nconst acutal = src_1.default.clone(obj);\nconst expect = obj;\nchai_1.assert.deepEqual(acutal, expect);\nchai_1.assert.instanceOf(acutal.key5, MyClass);",
              "err": {},
              "uuid": "9108d05f-860d-4113-9bb1-cc4a8409d547",
              "parentUUID": "56cf91f2-db7b-4634-889a-eda40854e1a7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "toJSON SHOULD NOT change after convert",
              "fullTitle": "customerSerializers toJSON SHOULD NOT change after convert",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let counter = 0;\nclass Clz {\n    data = 0;\n    toJSON() {\n        return counter++;\n    }\n}\nconst inst = new Clz();\ninst.data = 5;\nconst stage1 = JSON.stringify(inst);\nchai_1.assert.equal(counter, 1);\nchai_1.assert.equal('0', stage1);\nsrc_1.default.addCustomerSerializer({\n    class: Clz,\n    toContent: value => value.data,\n    fromContent: json => { const inst = new Clz(); inst.data = json; return inst; },\n});\nconst inst2 = src_1.default.clone(inst);\nchai_1.assert.equal(inst2.data, inst.data);\nchai_1.assert.notEqual(inst2.data, 0);\nchai_1.assert.equal(counter, 1);\nconst stage2 = JSON.stringify(inst);\nchai_1.assert.equal(counter, 2);\nchai_1.assert.equal('1', stage2);",
              "err": {},
              "uuid": "b126df39-9273-405c-8a99-979491e33ea4",
              "parentUUID": "56cf91f2-db7b-4634-889a-eda40854e1a7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SHOULD NOT add duplicate converter",
              "fullTitle": "customerSerializers SHOULD NOT add duplicate converter",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "class Clz {\n}\nchai_1.assert.doesNotThrow(() => {\n    src_1.default.addCustomerSerializer({\n        class: Clz,\n        fromContent: null,\n        toContent: null,\n    });\n});\nchai_1.assert.Throw(() => {\n    src_1.default.addCustomerSerializer({\n        class: Clz,\n        fromContent: null,\n        toContent: null,\n    });\n});\nchai_1.assert.Throw(() => {\n    src_1.default.addCustomerSerializer({\n        className: 'Clz',\n        class: null,\n        fromContent: null,\n        toContent: null,\n    });\n});\nchai_1.assert.doesNotThrow(() => {\n    src_1.default.addCustomerSerializer({\n        className: 'Clz2',\n        class: Clz,\n        fromContent: null,\n        toContent: null,\n    });\n});",
              "err": {},
              "uuid": "2a06bd7e-4de2-48dc-9394-2ce872212b61",
              "parentUUID": "56cf91f2-db7b-4634-889a-eda40854e1a7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9108d05f-860d-4113-9bb1-cc4a8409d547",
            "b126df39-9273-405c-8a99-979491e33ea4",
            "2a06bd7e-4de2-48dc-9394-2ce872212b61"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "434a155c-aa60-46c4-992a-07f112f9e0be",
          "title": "primitive",
          "fullFile": "D:\\works\\ts-project\\rich-json\\test\\primitive.test.ts",
          "file": "\\test\\primitive.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"primitive\"",
              "fullTitle": "primitive \"before each\" hook in \"primitive\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "src_1.default.resetCustomerSerializers();",
              "err": {},
              "uuid": "833bad58-0ab4-4f8b-867c-bbe616ff2308",
              "parentUUID": "434a155c-aa60-46c4-992a-07f112f9e0be",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "159b66c9-2ad4-4358-b985-9bc7f80b2cb8",
              "title": "null",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\primitive.test.ts",
              "file": "\\test\\primitive.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "primitive null plain",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = null;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "d743fd10-60cf-43e9-bb66-26e2e95d31de",
                  "parentUUID": "159b66c9-2ad4-4358-b985-9bc7f80b2cb8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "primitive null obj",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: null };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);",
                  "err": {},
                  "uuid": "7c9f49c2-1732-458b-bfc4-b2bb56a90428",
                  "parentUUID": "159b66c9-2ad4-4358-b985-9bc7f80b2cb8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d743fd10-60cf-43e9-bb66-26e2e95d31de",
                "7c9f49c2-1732-458b-bfc4-b2bb56a90428"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c9e4e1c4-d300-4724-a71f-f2720b88bd1d",
              "title": "undefined",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\primitive.test.ts",
              "file": "\\test\\primitive.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "primitive undefined plain",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = undefined;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "80eb19d4-6fec-4afb-8cfe-b8c2a1e88f86",
                  "parentUUID": "c9e4e1c4-d300-4724-a71f-f2720b88bd1d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "primitive undefined obj",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: undefined };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, {});\nchai_1.assert.notStrictEqual(actual, expect);",
                  "err": {},
                  "uuid": "37bd78c6-8550-4710-93ad-279512b88cb1",
                  "parentUUID": "c9e4e1c4-d300-4724-a71f-f2720b88bd1d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "80eb19d4-6fec-4afb-8cfe-b8c2a1e88f86",
                "37bd78c6-8550-4710-93ad-279512b88cb1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6db3ac7b-3529-4ae1-acc9-bec4336f7188",
              "title": "bigint",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\primitive.test.ts",
              "file": "\\test\\primitive.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "primitive bigint plain",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = 1n;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "d6e6156b-9bd1-4cd6-881c-e27fb2c140fe",
                  "parentUUID": "6db3ac7b-3529-4ae1-acc9-bec4336f7188",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "primitive bigint obj",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: 1n };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);",
                  "err": {},
                  "uuid": "ce1a4330-0277-4452-a542-3008653c9d06",
                  "parentUUID": "6db3ac7b-3529-4ae1-acc9-bec4336f7188",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d6e6156b-9bd1-4cd6-881c-e27fb2c140fe",
                "ce1a4330-0277-4452-a542-3008653c9d06"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "48f0d10d-dcd4-45e0-90d6-500176d1a547",
              "title": "number",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\primitive.test.ts",
              "file": "\\test\\primitive.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "normal",
                  "fullTitle": "primitive number normal",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = 1;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "fcece2eb-dbf0-4f59-b170-2cab38d5cc71",
                  "parentUUID": "48f0d10d-dcd4-45e0-90d6-500176d1a547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "NaN",
                  "fullTitle": "primitive number NaN",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number.NaN;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.isNaN(actual);",
                  "err": {},
                  "uuid": "d237255a-8f2d-427e-9c4d-b9b4e9fe003c",
                  "parentUUID": "48f0d10d-dcd4-45e0-90d6-500176d1a547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "-0",
                  "fullTitle": "primitive number -0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = -0;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notDeepEqual(actual, 0);",
                  "err": {},
                  "uuid": "cd266e11-2718-453b-aa3e-65888fd0540d",
                  "parentUUID": "48f0d10d-dcd4-45e0-90d6-500176d1a547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "EPSILON",
                  "fullTitle": "primitive number EPSILON",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "638817ff-4a8f-4a4c-a51b-68e43e569814",
                  "parentUUID": "48f0d10d-dcd4-45e0-90d6-500176d1a547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "MAX_SAFE_INTEGER",
                  "fullTitle": "primitive number MAX_SAFE_INTEGER",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "043cdc50-9aa6-4eee-ad96-b2f01a76d3c2",
                  "parentUUID": "48f0d10d-dcd4-45e0-90d6-500176d1a547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "MAX_VALUE",
                  "fullTitle": "primitive number MAX_VALUE",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "e5aeddb7-d756-40cd-9d54-651c429fa843",
                  "parentUUID": "48f0d10d-dcd4-45e0-90d6-500176d1a547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "MIN_SAFE_INTEGER",
                  "fullTitle": "primitive number MIN_SAFE_INTEGER",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "3e93ce7c-cd01-4157-b524-837cb0aeb590",
                  "parentUUID": "48f0d10d-dcd4-45e0-90d6-500176d1a547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "MIN_VALUE",
                  "fullTitle": "primitive number MIN_VALUE",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "705abec3-ee09-40ac-bbde-d667177c9c23",
                  "parentUUID": "48f0d10d-dcd4-45e0-90d6-500176d1a547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "NEGATIVE_INFINITY",
                  "fullTitle": "primitive number NEGATIVE_INFINITY",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "f01515fb-1368-4339-920f-0bb86e2e1c75",
                  "parentUUID": "48f0d10d-dcd4-45e0-90d6-500176d1a547",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "POSITIVE_INFINITY",
                  "fullTitle": "primitive number POSITIVE_INFINITY",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "bd127d16-2038-4ec2-8fb8-3cae759992ba",
                  "parentUUID": "48f0d10d-dcd4-45e0-90d6-500176d1a547",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fcece2eb-dbf0-4f59-b170-2cab38d5cc71",
                "d237255a-8f2d-427e-9c4d-b9b4e9fe003c",
                "cd266e11-2718-453b-aa3e-65888fd0540d",
                "638817ff-4a8f-4a4c-a51b-68e43e569814",
                "043cdc50-9aa6-4eee-ad96-b2f01a76d3c2",
                "e5aeddb7-d756-40cd-9d54-651c429fa843",
                "3e93ce7c-cd01-4157-b524-837cb0aeb590",
                "705abec3-ee09-40ac-bbde-d667177c9c23",
                "f01515fb-1368-4339-920f-0bb86e2e1c75",
                "bd127d16-2038-4ec2-8fb8-3cae759992ba"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "86595b95-dc69-4c43-8726-87700bb1d8dd",
          "title": "Stringify Options",
          "fullFile": "D:\\works\\ts-project\\rich-json\\test\\StringifyOptions.test.ts",
          "file": "\\test\\StringifyOptions.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "pretty",
              "fullTitle": "Stringify Options pretty",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = { a: 1, b: 5, c: { d: true, e: false } };\nconst pretty = 5;\nconst expect = JSON.stringify(obj, null, pretty);\nconst actual = src_1.default.stringify(obj, { pretty }).replace(/\\n {5}/g, '\\n');\nchai_1.assert.include(actual, expect);",
              "err": {},
              "uuid": "92924120-2294-43ec-bf4d-2f4cc7d4fea7",
              "parentUUID": "86595b95-dc69-4c43-8726-87700bb1d8dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "excludKeys string",
              "fullTitle": "Stringify Options excludKeys string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = { a: 1, b: 5, c: { d: true, e: false } };\nconst expect = { a: 1, c: { d: true } };\nconst actual = src_1.default.clone(obj, { excludKeys: ['b', 'e'] });\nchai_1.assert.deepEqual(actual, expect);",
              "err": {},
              "uuid": "bc64f859-7fc9-4670-b40c-dffa63570082",
              "parentUUID": "86595b95-dc69-4c43-8726-87700bb1d8dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "excludKeys RegExp",
              "fullTitle": "Stringify Options excludKeys RegExp",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = { a: 1, b: 5, c: { d: true, e: false } };\nconst expect = { a: 1, c: { d: true } };\nconst actual = src_1.default.clone(obj, { excludKeys: /^b|e$/ });\nchai_1.assert.deepEqual(actual, expect);",
              "err": {},
              "uuid": "88508aa2-f71e-4002-99d7-a21854e61350",
              "parentUUID": "86595b95-dc69-4c43-8726-87700bb1d8dd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "excludKeys mix",
              "fullTitle": "Stringify Options excludKeys mix",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = { a: 1, b: 5, c: { d: true, e: false } };\nconst expect = { c: { d: true } };\nconst actual = src_1.default.clone(obj, { excludKeys: ['a', /^b|e$/] });\nchai_1.assert.deepEqual(actual, expect);",
              "err": {},
              "uuid": "4fdfe54b-f560-4757-b743-b2590293f5fa",
              "parentUUID": "86595b95-dc69-4c43-8726-87700bb1d8dd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "92924120-2294-43ec-bf4d-2f4cc7d4fea7",
            "bc64f859-7fc9-4670-b40c-dffa63570082",
            "88508aa2-f71e-4002-99d7-a21854e61350",
            "4fdfe54b-f560-4757-b743-b2590293f5fa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "docs",
        "reportTitle": "@rickyli79/rich-json v1.1.3",
        "reportPageTitle": "@rickyli79/rich-json report",
        "reportFilename": "index"
      },
      "version": "6.2.0"
    }
  }
}