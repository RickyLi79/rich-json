{
  "stats": {
    "suites": 20,
    "tests": 72,
    "passes": 72,
    "pending": 0,
    "failures": 0,
    "start": "2024-03-07T16:54:39.813Z",
    "end": "2024-03-07T16:54:39.872Z",
    "duration": 59,
    "testsRegistered": 72,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "dbfa0df2-a120-4df8-9c85-5bd212616c6b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0cb9e77b-bda7-4b6a-8462-a5d9dd241f1a",
          "title": "buildin serializers",
          "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
          "file": "\\test\\buildin-serializers.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"buildin serializers\"",
              "fullTitle": "buildin serializers \"before each\" hook in \"buildin serializers\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "src_1.default.resetCustomerSerializers();",
              "err": {},
              "uuid": "5475f765-a4dc-4bfc-8b15-369505d07dee",
              "parentUUID": "0cb9e77b-bda7-4b6a-8462-a5d9dd241f1a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "69d402df-8fba-4918-bc64-e137cfddd4c8",
              "title": "Date",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "buildin serializers Date plain",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Date();\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Date);",
                  "err": {},
                  "uuid": "d0a9d7e1-aa49-4eb2-9aa4-94548a36e040",
                  "parentUUID": "69d402df-8fba-4918-bc64-e137cfddd4c8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "buildin serializers Date obj",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Date() };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Date);",
                  "err": {},
                  "uuid": "5a922cbe-24a2-4ec7-90dd-c3b1b1cd6838",
                  "parentUUID": "69d402df-8fba-4918-bc64-e137cfddd4c8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d0a9d7e1-aa49-4eb2-9aa4-94548a36e040",
                "5a922cbe-24a2-4ec7-90dd-c3b1b1cd6838"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0913104f-65a3-4a13-a642-a6c436f5cbcb",
              "title": "URL",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "buildin serializers URL plain",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new URL('http://abc.def?q=1&3#213');\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, URL);",
                  "err": {},
                  "uuid": "2b49c24a-5fe5-4bc1-a9d2-34d66a751363",
                  "parentUUID": "0913104f-65a3-4a13-a642-a6c436f5cbcb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "buildin serializers URL obj",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Date() };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Date);",
                  "err": {},
                  "uuid": "c5df5dba-9b8c-4e41-981a-e2a09320d23c",
                  "parentUUID": "0913104f-65a3-4a13-a642-a6c436f5cbcb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2b49c24a-5fe5-4bc1-a9d2-34d66a751363",
                "c5df5dba-9b8c-4e41-981a-e2a09320d23c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3aee6c5d-7dda-4acf-9829-9c9bdf608f2d",
              "title": "Error",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "#1",
                  "fullTitle": "buildin serializers Error #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Error('my message');\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.name, expect.name);\nchai_1.assert.deepEqual(actual.message, expect.message);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Error);",
                  "err": {},
                  "uuid": "9cc325b9-c67c-4db3-a8bf-44ce14d8df28",
                  "parentUUID": "3aee6c5d-7dda-4acf-9829-9c9bdf608f2d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "#2",
                  "fullTitle": "buildin serializers Error #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let expect;\ntry {\n    ({}.a.b.c = 1);\n}\ncatch (e) {\n    expect = e;\n}\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.name, expect.name);\nchai_1.assert.deepEqual(actual.message, expect.message);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, TypeError);",
                  "err": {},
                  "uuid": "dabaa5d1-f53f-41ff-a550-baa4475a6522",
                  "parentUUID": "3aee6c5d-7dda-4acf-9829-9c9bdf608f2d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9cc325b9-c67c-4db3-a8bf-44ce14d8df28",
                "dabaa5d1-f53f-41ff-a550-baa4475a6522"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "cba01686-b876-4813-973c-b91db83ffd70",
              "title": "RegExp",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain without flag",
                  "fullTitle": "buildin serializers RegExp plain without flag",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = /RegExp/;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, RegExp);",
                  "err": {},
                  "uuid": "a07a143c-b119-4b45-8f36-50365d0c2a82",
                  "parentUUID": "cba01686-b876-4813-973c-b91db83ffd70",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain with flag",
                  "fullTitle": "buildin serializers RegExp plain with flag",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = /RegExp/ig;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, RegExp);",
                  "err": {},
                  "uuid": "1e10a950-874f-4c13-a771-a8aa9ba6a897",
                  "parentUUID": "cba01686-b876-4813-973c-b91db83ffd70",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "buildin serializers RegExp obj",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: /RegExp/ };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, RegExp);",
                  "err": {},
                  "uuid": "38f34bdd-1dce-4232-ab42-69c1daa5a157",
                  "parentUUID": "cba01686-b876-4813-973c-b91db83ffd70",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a07a143c-b119-4b45-8f36-50365d0c2a82",
                "1e10a950-874f-4c13-a771-a8aa9ba6a897",
                "38f34bdd-1dce-4232-ab42-69c1daa5a157"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4bfdf5b0-aee9-4106-a2fc-30fd47cd3383",
              "title": "Set",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "buildin serializers Set plain",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Set([1, 2, 3]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Set);",
                  "err": {},
                  "uuid": "17dbe6aa-f12a-4db9-a3a0-2d3be9088d94",
                  "parentUUID": "4bfdf5b0-aee9-4106-a2fc-30fd47cd3383",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "buildin serializers Set obj",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Set([1, 2, 3]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Set);",
                  "err": {},
                  "uuid": "126e421a-601a-4e9a-8a73-20ab13e259c1",
                  "parentUUID": "4bfdf5b0-aee9-4106-a2fc-30fd47cd3383",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "17dbe6aa-f12a-4db9-a3a0-2d3be9088d94",
                "126e421a-601a-4e9a-8a73-20ab13e259c1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6c6b705e-e3fa-446b-be0d-f59379b5ea3e",
              "title": "Map",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "buildin serializers Map plain",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Map([[1, 2], [3, 4]]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Map);",
                  "err": {},
                  "uuid": "d317f685-5602-495c-9aae-7ffe814aaa57",
                  "parentUUID": "6c6b705e-e3fa-446b-be0d-f59379b5ea3e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "buildin serializers Map obj",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Map([[1, 2], [3, 4]]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Map);",
                  "err": {},
                  "uuid": "56e315ea-a43e-4f76-a0ad-5571c82f55a8",
                  "parentUUID": "6c6b705e-e3fa-446b-be0d-f59379b5ea3e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d317f685-5602-495c-9aae-7ffe814aaa57",
                "56e315ea-a43e-4f76-a0ad-5571c82f55a8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "91101b60-cdd5-4772-be5e-1de994d7c2b8",
              "title": "Function",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain #1",
                  "fullTitle": "buildin serializers Function plain #1",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = function () { return 1; };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "5f5af278-1833-4f26-be7b-f00e428e5c58",
                  "parentUUID": "91101b60-cdd5-4772-be5e-1de994d7c2b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #1 async",
                  "fullTitle": "buildin serializers Function plain #1 async",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = async function () { return 1; };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "9faaa553-43ae-4eb4-b5c7-aa4f67c896fd",
                  "parentUUID": "91101b60-cdd5-4772-be5e-1de994d7c2b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #2",
                  "fullTitle": "buildin serializers Function plain #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = () => { 0; };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "561452e4-853a-4753-b09d-fc550ace6807",
                  "parentUUID": "91101b60-cdd5-4772-be5e-1de994d7c2b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #2 async",
                  "fullTitle": "buildin serializers Function plain #2 async",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = async () => { 0; };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "0782c57d-11a1-4146-aae8-3032ec6f3657",
                  "parentUUID": "91101b60-cdd5-4772-be5e-1de994d7c2b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #3",
                  "fullTitle": "buildin serializers Function plain #3",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = (a) => a;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "df178ec8-59a3-4514-851d-a78c10a56912",
                  "parentUUID": "91101b60-cdd5-4772-be5e-1de994d7c2b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #3 async",
                  "fullTitle": "buildin serializers Function plain #3 async",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = async (a) => a;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "82686eb3-79f8-4c51-b5da-6d6c23fa3e44",
                  "parentUUID": "91101b60-cdd5-4772-be5e-1de994d7c2b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #1",
                  "fullTitle": "buildin serializers Function obj #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a() { return 1; } };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "affa913a-625d-4a79-b1fc-867698a3d18e",
                  "parentUUID": "91101b60-cdd5-4772-be5e-1de994d7c2b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #1 async",
                  "fullTitle": "buildin serializers Function obj #1 async",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { async a() { return 1; } };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "dff82210-0f9c-4fab-a6a0-59eb8001d9ee",
                  "parentUUID": "91101b60-cdd5-4772-be5e-1de994d7c2b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #2",
                  "fullTitle": "buildin serializers Function obj #2",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: () => { 0; } };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "9aa95c8d-ea3f-4c3c-92b0-dfedec5aa74e",
                  "parentUUID": "91101b60-cdd5-4772-be5e-1de994d7c2b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #2 async",
                  "fullTitle": "buildin serializers Function obj #2 async",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: async () => { 0; } };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "bb0c7183-506c-44da-885e-af0759eb96b0",
                  "parentUUID": "91101b60-cdd5-4772-be5e-1de994d7c2b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #3",
                  "fullTitle": "buildin serializers Function obj #3",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: (a) => a };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "c71b17eb-6196-4692-940e-fe7af4a7d68a",
                  "parentUUID": "91101b60-cdd5-4772-be5e-1de994d7c2b8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #3 async",
                  "fullTitle": "buildin serializers Function obj #3 async",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: async (a) => a };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "615d57ed-3142-4005-ac5a-aa655e5e3c3a",
                  "parentUUID": "91101b60-cdd5-4772-be5e-1de994d7c2b8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5f5af278-1833-4f26-be7b-f00e428e5c58",
                "9faaa553-43ae-4eb4-b5c7-aa4f67c896fd",
                "561452e4-853a-4753-b09d-fc550ace6807",
                "0782c57d-11a1-4146-aae8-3032ec6f3657",
                "df178ec8-59a3-4514-851d-a78c10a56912",
                "82686eb3-79f8-4c51-b5da-6d6c23fa3e44",
                "affa913a-625d-4a79-b1fc-867698a3d18e",
                "dff82210-0f9c-4fab-a6a0-59eb8001d9ee",
                "9aa95c8d-ea3f-4c3c-92b0-dfedec5aa74e",
                "bb0c7183-506c-44da-885e-af0759eb96b0",
                "c71b17eb-6196-4692-940e-fe7af4a7d68a",
                "615d57ed-3142-4005-ac5a-aa655e5e3c3a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f11175fe-8a6b-45b4-b6d0-3bb2e8e13225",
              "title": "Buffer",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain Buffer",
                  "fullTitle": "buildin serializers Buffer plain Buffer",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Buffer.from([72, 101, 108, 108, 111]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Buffer);",
                  "err": {},
                  "uuid": "337af4bf-03ac-450e-beb1-c9d791e213e4",
                  "parentUUID": "f11175fe-8a6b-45b4-b6d0-3bb2e8e13225",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain Uint8Array",
                  "fullTitle": "buildin serializers Buffer plain Uint8Array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Uint8Array([72, 101, 108, 108, 111]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Uint8Array);",
                  "err": {},
                  "uuid": "abfdcde9-8f12-47a4-9dfa-7820351d90e4",
                  "parentUUID": "f11175fe-8a6b-45b4-b6d0-3bb2e8e13225",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain Uint16Array",
                  "fullTitle": "buildin serializers Buffer plain Uint16Array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Uint16Array([72, 101, 108, 108, 111]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Uint16Array);",
                  "err": {},
                  "uuid": "e98d4bec-fc40-4c16-a229-7172df720bb7",
                  "parentUUID": "f11175fe-8a6b-45b4-b6d0-3bb2e8e13225",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain Uint32Array",
                  "fullTitle": "buildin serializers Buffer plain Uint32Array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Uint32Array([72, 101, 108, 108, 111]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Uint32Array);",
                  "err": {},
                  "uuid": "cfd6daf4-0558-4b05-b27e-21801e013510",
                  "parentUUID": "f11175fe-8a6b-45b4-b6d0-3bb2e8e13225",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain Int32Array",
                  "fullTitle": "buildin serializers Buffer plain Int32Array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Int32Array([72, 101, 108, 108, 111]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Int32Array);",
                  "err": {},
                  "uuid": "f6b8437c-b2f3-4eee-892b-13d473ab4a1d",
                  "parentUUID": "f11175fe-8a6b-45b4-b6d0-3bb2e8e13225",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj Buffer",
                  "fullTitle": "buildin serializers Buffer obj Buffer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: Buffer.from([72, 101, 108, 108, 111]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Buffer);",
                  "err": {},
                  "uuid": "244f67d5-e210-42a3-bb03-3f62ea6d0644",
                  "parentUUID": "f11175fe-8a6b-45b4-b6d0-3bb2e8e13225",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj Uint8Array",
                  "fullTitle": "buildin serializers Buffer obj Uint8Array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Uint8Array([72, 101, 108, 108, 111]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Uint8Array);",
                  "err": {},
                  "uuid": "c7240e6a-b331-45c1-a557-03da24cebe1e",
                  "parentUUID": "f11175fe-8a6b-45b4-b6d0-3bb2e8e13225",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj Uint16Array",
                  "fullTitle": "buildin serializers Buffer obj Uint16Array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Uint16Array([72, 101, 108, 108, 111]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Uint16Array);",
                  "err": {},
                  "uuid": "459221e6-4b40-4673-b538-83f219bd6acf",
                  "parentUUID": "f11175fe-8a6b-45b4-b6d0-3bb2e8e13225",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj Uint32Array",
                  "fullTitle": "buildin serializers Buffer obj Uint32Array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Uint32Array([72, 101, 108, 108, 111]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Uint32Array);",
                  "err": {},
                  "uuid": "4595c7bc-e1b3-45f3-b963-74a0787ddf17",
                  "parentUUID": "f11175fe-8a6b-45b4-b6d0-3bb2e8e13225",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "337af4bf-03ac-450e-beb1-c9d791e213e4",
                "abfdcde9-8f12-47a4-9dfa-7820351d90e4",
                "e98d4bec-fc40-4c16-a229-7172df720bb7",
                "cfd6daf4-0558-4b05-b27e-21801e013510",
                "f6b8437c-b2f3-4eee-892b-13d473ab4a1d",
                "244f67d5-e210-42a3-bb03-3f62ea6d0644",
                "c7240e6a-b331-45c1-a557-03da24cebe1e",
                "459221e6-4b40-4673-b538-83f219bd6acf",
                "4595c7bc-e1b3-45f3-b963-74a0787ddf17"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a9c6ac7a-6234-4f35-8e81-a3f057553d9f",
              "title": "WrapRunner",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain #1",
                  "fullTitle": "buildin serializers WrapRunner plain #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "function add(a, b) {\n    return a + b;\n}\nconst expect = new src_1.default.WrapRunner(add, 1, 2);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.instanceOf(actual, src_1.default.WrapRunner);\nchai_1.assert.deepEqual(actual.run(), 3);",
                  "err": {},
                  "uuid": "19814392-2b08-44a1-a9f1-1fc25e49c65b",
                  "parentUUID": "a9c6ac7a-6234-4f35-8e81-a3f057553d9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #1 Promise",
                  "fullTitle": "buildin serializers WrapRunner plain #1 Promise",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "function add(a, b) {\n    return Promise.resolve(a + b);\n}\nconst expect = new src_1.default.WrapRunner(add, 1, 2);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.instanceOf(actual, src_1.default.WrapRunner);\nconst called = actual.run();\nchai_1.assert.instanceOf(called, Promise);\nchai_1.assert.deepEqual(await called, 3);",
                  "err": {},
                  "uuid": "a8217eda-0a3b-4932-b2ed-7f019e9a02bc",
                  "parentUUID": "a9c6ac7a-6234-4f35-8e81-a3f057553d9f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #2 whih `this`",
                  "fullTitle": "buildin serializers WrapRunner plain #2 whih `this`",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "function add(a, b) {\n    return (this ?? 0) + a + b;\n}\nconst expect = new src_1.default.WrapRunner(add, 1, 2);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.instanceOf(actual, src_1.default.WrapRunner);\nchai_1.assert.deepEqual(actual.run(), 3);\nchai_1.assert.deepEqual(actual.run(5), 8);\nchai_1.assert.deepEqual(actual.run(-1), 2);",
                  "err": {},
                  "uuid": "583f53c2-1327-4914-998b-be4fa2449c94",
                  "parentUUID": "a9c6ac7a-6234-4f35-8e81-a3f057553d9f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "19814392-2b08-44a1-a9f1-1fc25e49c65b",
                "a8217eda-0a3b-4932-b2ed-7f019e9a02bc",
                "583f53c2-1327-4914-998b-be4fa2449c94"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e9f4f932-fe5e-480e-bed9-057ca39abd11",
          "title": "complex",
          "fullFile": "D:\\works\\ts-project\\rich-json\\test\\complex.test.ts",
          "file": "\\test\\complex.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"complex\"",
              "fullTitle": "complex \"before each\" hook in \"complex\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "src_1.default.resetCustomerSerializers();\nsrc_1.default.addCustomerSerializer({\n    className: 'abc',\n    class: MyClass,\n    toContent: value => ({\n        abc: value.data,\n        xyz: value.ref,\n    }),\n    fromContent: ({ abc, xyz }) => {\n        return MyClass.create(abc, xyz);\n    },\n});",
              "err": {},
              "uuid": "2735ae1f-5126-4aed-b395-0a18c438605f",
              "parentUUID": "e9f4f932-fe5e-480e-bed9-057ca39abd11",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"complex\"",
              "fullTitle": "complex \"before each\" hook in \"complex\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "actual = src_1.default.clone(expect);",
              "err": {},
              "uuid": "58fd4f37-6492-4235-9d74-3df497df57c9",
              "parentUUID": "e9f4f932-fe5e-480e-bed9-057ca39abd11",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "612e61c8-8da5-4d86-aba2-4b2bbe93b461",
              "title": "circle",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\complex.test.ts",
              "file": "\\test\\complex.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "root",
                  "fullTitle": "complex circle root",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.circle.root, actual);",
                  "err": {},
                  "uuid": "1af7c856-53c1-4b68-bb52-4cd44a39da2d",
                  "parentUUID": "612e61c8-8da5-4d86-aba2-4b2bbe93b461",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "circle",
                  "fullTitle": "complex circle circle",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.circle.circle.circle, actual.circle);",
                  "err": {},
                  "uuid": "249d53a0-48d5-4370-b118-e1256f897625",
                  "parentUUID": "612e61c8-8da5-4d86-aba2-4b2bbe93b461",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1af7c856-53c1-4b68-bb52-4cd44a39da2d",
                "249d53a0-48d5-4370-b118-e1256f897625"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "502b0895-7f6f-46e0-b1e4-c53fa5da37b6",
              "title": "$ref",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\complex.test.ts",
              "file": "\\test\\complex.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "function",
                  "fullTitle": "complex $ref function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.c, actual.c);",
                  "err": {},
                  "uuid": "c85f72eb-7032-4cb4-8df2-29c49a63847b",
                  "parentUUID": "502b0895-7f6f-46e0-b1e4-c53fa5da37b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "object",
                  "fullTitle": "complex $ref object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.d, actual.d);\nchai_1.assert.notStrictEqual(actual.$ref.d, obj);",
                  "err": {},
                  "uuid": "bc7f1a22-04b4-488b-86b7-a7daea5de63d",
                  "parentUUID": "502b0895-7f6f-46e0-b1e4-c53fa5da37b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "member of Set #1",
                  "fullTitle": "complex $ref member of Set #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.e, actual.e);\nconst value = Array.from(actual.$ref.e)[0];\nchai_1.assert.strictEqual(value, actual.d);",
                  "err": {},
                  "uuid": "3e5829d2-5151-452c-87d8-ff32dfab9115",
                  "parentUUID": "502b0895-7f6f-46e0-b1e4-c53fa5da37b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "member of Set #2",
                  "fullTitle": "complex $ref member of Set #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const value = Array.from(actual.$ref.g)[0];\nchai_1.assert.strictEqual(value, actual.g);",
                  "err": {},
                  "uuid": "013e78a0-14bb-4302-a30d-1d4eb0d824ae",
                  "parentUUID": "502b0895-7f6f-46e0-b1e4-c53fa5da37b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "member of Map #1",
                  "fullTitle": "complex $ref member of Map #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.f, actual.f);\nconst key = Array.from(actual.$ref.f.entries())[0][0];\nchai_1.assert.strictEqual(key, actual.d);\nconst value = Array.from(actual.$ref.f.entries())[1][1];\nchai_1.assert.strictEqual(value, actual.d);",
                  "err": {},
                  "uuid": "14c6a15b-1f3d-4c25-b5e9-730ff4d0275c",
                  "parentUUID": "502b0895-7f6f-46e0-b1e4-c53fa5da37b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "member of Map #2",
                  "fullTitle": "complex $ref member of Map #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = Array.from(actual.$ref.gg.entries())[0][0];\nchai_1.assert.strictEqual(key, actual.g);\nconst value = Array.from(actual.$ref.gg.entries())[1][1];\nchai_1.assert.strictEqual(value, actual.g);",
                  "err": {},
                  "uuid": "cb1d4f8f-34d6-497a-b515-0361f255567a",
                  "parentUUID": "502b0895-7f6f-46e0-b1e4-c53fa5da37b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "buffer",
                  "fullTitle": "complex $ref buffer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.h, actual.h);\nchai_1.assert.notStrictEqual(actual.$ref.h, buffer);",
                  "err": {},
                  "uuid": "a0e0f717-2761-453f-8cf6-d449cfca9ae5",
                  "parentUUID": "502b0895-7f6f-46e0-b1e4-c53fa5da37b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "class #1",
                  "fullTitle": "complex $ref class #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.g0, actual.g);\nchai_1.assert.notStrictEqual(actual.$ref.g0, obj2);",
                  "err": {},
                  "uuid": "98b7d7ee-b99b-4162-b298-b48a65c14eef",
                  "parentUUID": "502b0895-7f6f-46e0-b1e4-c53fa5da37b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "class #2",
                  "fullTitle": "complex $ref class #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.g0.ref, actual.d);\nchai_1.assert.notStrictEqual(actual.$ref.g0.ref, obj2);",
                  "err": {},
                  "uuid": "677eb439-3800-4797-83c4-f47b761f1588",
                  "parentUUID": "502b0895-7f6f-46e0-b1e4-c53fa5da37b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "class #3 - in Set",
                  "fullTitle": "complex $ref class #3 - in Set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.i, actual.i);\nconst value = Array.from(actual.$ref.i)[0];\nchai_1.assert.strictEqual(value, actual.g);\nchai_1.assert.strictEqual(value.ref, actual.d);",
                  "err": {},
                  "uuid": "f74071f0-02cc-4f0b-8fa1-e288b1293c3e",
                  "parentUUID": "502b0895-7f6f-46e0-b1e4-c53fa5da37b6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c85f72eb-7032-4cb4-8df2-29c49a63847b",
                "bc7f1a22-04b4-488b-86b7-a7daea5de63d",
                "3e5829d2-5151-452c-87d8-ff32dfab9115",
                "013e78a0-14bb-4302-a30d-1d4eb0d824ae",
                "14c6a15b-1f3d-4c25-b5e9-730ff4d0275c",
                "cb1d4f8f-34d6-497a-b515-0361f255567a",
                "a0e0f717-2761-453f-8cf6-d449cfca9ae5",
                "98b7d7ee-b99b-4162-b298-b48a65c14eef",
                "677eb439-3800-4797-83c4-f47b761f1588",
                "f74071f0-02cc-4f0b-8fa1-e288b1293c3e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "771d4415-d4e5-4a13-a42a-6825459e0dd1",
          "title": "customerSerializers",
          "fullFile": "D:\\works\\ts-project\\rich-json\\test\\customerSerializers.test.ts",
          "file": "\\test\\customerSerializers.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"customerSerializers\"",
              "fullTitle": "customerSerializers \"before each\" hook in \"customerSerializers\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "src_1.default.resetCustomerSerializers();",
              "err": {},
              "uuid": "9d56d60f-8e2a-43f9-aad3-ae2074014e77",
              "parentUUID": "771d4415-d4e5-4a13-a42a-6825459e0dd1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "base",
              "fullTitle": "customerSerializers base",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "src_1.default.addCustomerSerializer({\n    className: 'abc',\n    class: MyClass,\n    toContent: value => ({\n        abc: value.data,\n    }),\n    fromContent: json => {\n        return MyClass.create(json.abc);\n    },\n});\nconst acutal = src_1.default.clone(obj);\nconst expect = obj;\nchai_1.assert.deepEqual(acutal, expect);\nchai_1.assert.instanceOf(acutal.key5, MyClass);",
              "err": {},
              "uuid": "6ae5cb5a-e71e-4748-b15c-1565eb5d1ee3",
              "parentUUID": "771d4415-d4e5-4a13-a42a-6825459e0dd1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "toJSON SHOULD NOT change after convert",
              "fullTitle": "customerSerializers toJSON SHOULD NOT change after convert",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let counter = 0;\nclass Clz {\n    data = 0;\n    toJSON() {\n        return counter++;\n    }\n}\nconst inst = new Clz();\ninst.data = 5;\nconst stage1 = JSON.stringify(inst);\nchai_1.assert.equal(counter, 1);\nchai_1.assert.equal('0', stage1);\nsrc_1.default.addCustomerSerializer({\n    class: Clz,\n    toContent: value => value.data,\n    fromContent: json => { const inst = new Clz(); inst.data = json; return inst; },\n});\nconst inst2 = src_1.default.clone(inst);\nchai_1.assert.equal(inst2.data, inst.data);\nchai_1.assert.notEqual(inst2.data, 0);\nchai_1.assert.equal(counter, 1);\nconst stage2 = JSON.stringify(inst);\nchai_1.assert.equal(counter, 2);\nchai_1.assert.equal('1', stage2);",
              "err": {},
              "uuid": "46e9810e-eb67-477a-ad1d-9da4ae1581fb",
              "parentUUID": "771d4415-d4e5-4a13-a42a-6825459e0dd1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SHOULD NOT add duplicate converter",
              "fullTitle": "customerSerializers SHOULD NOT add duplicate converter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "class Clz {\n}\nchai_1.assert.doesNotThrow(() => {\n    src_1.default.addCustomerSerializer({\n        class: Clz,\n        fromContent: null,\n        toContent: null,\n    });\n});\nchai_1.assert.Throw(() => {\n    src_1.default.addCustomerSerializer({\n        class: Clz,\n        fromContent: null,\n        toContent: null,\n    });\n});\nchai_1.assert.Throw(() => {\n    src_1.default.addCustomerSerializer({\n        className: 'Clz',\n        class: null,\n        fromContent: null,\n        toContent: null,\n    });\n});\nchai_1.assert.doesNotThrow(() => {\n    src_1.default.addCustomerSerializer({\n        className: 'Clz2',\n        class: Clz,\n        fromContent: null,\n        toContent: null,\n    });\n});",
              "err": {},
              "uuid": "8b023852-dfc8-4880-98b6-73c08fd6222f",
              "parentUUID": "771d4415-d4e5-4a13-a42a-6825459e0dd1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6ae5cb5a-e71e-4748-b15c-1565eb5d1ee3",
            "46e9810e-eb67-477a-ad1d-9da4ae1581fb",
            "8b023852-dfc8-4880-98b6-73c08fd6222f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "050fde1e-f238-4751-904d-8b17179c79a6",
          "title": "primitive",
          "fullFile": "D:\\works\\ts-project\\rich-json\\test\\primitive.test.ts",
          "file": "\\test\\primitive.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"primitive\"",
              "fullTitle": "primitive \"before each\" hook in \"primitive\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "src_1.default.resetCustomerSerializers();",
              "err": {},
              "uuid": "30b6b176-771e-44d6-a7f7-ee81db4280eb",
              "parentUUID": "050fde1e-f238-4751-904d-8b17179c79a6",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3c53945b-5690-4a6a-a21c-2ed81394b988",
              "title": "null",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\primitive.test.ts",
              "file": "\\test\\primitive.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "primitive null plain",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = null;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "4f0be9ce-55e0-421a-a79d-955999b58768",
                  "parentUUID": "3c53945b-5690-4a6a-a21c-2ed81394b988",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "primitive null obj",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: null };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);",
                  "err": {},
                  "uuid": "c216fc5d-604a-4ca7-986c-359539246d45",
                  "parentUUID": "3c53945b-5690-4a6a-a21c-2ed81394b988",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4f0be9ce-55e0-421a-a79d-955999b58768",
                "c216fc5d-604a-4ca7-986c-359539246d45"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f200cdf2-5abc-4c88-ab39-6f70e04bcdb9",
              "title": "undefined",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\primitive.test.ts",
              "file": "\\test\\primitive.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "primitive undefined plain",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = undefined;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "7d353c8b-b1cf-4ad8-be9f-7c44571b9553",
                  "parentUUID": "f200cdf2-5abc-4c88-ab39-6f70e04bcdb9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "primitive undefined obj",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: undefined };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, {});\nchai_1.assert.notStrictEqual(actual, expect);",
                  "err": {},
                  "uuid": "e76c02fc-86f1-47dc-94bc-0b104592e809",
                  "parentUUID": "f200cdf2-5abc-4c88-ab39-6f70e04bcdb9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7d353c8b-b1cf-4ad8-be9f-7c44571b9553",
                "e76c02fc-86f1-47dc-94bc-0b104592e809"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "879c44de-115e-4947-b4fe-82c72871b7af",
              "title": "bigint",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\primitive.test.ts",
              "file": "\\test\\primitive.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "primitive bigint plain",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = 1n;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "7f6dad48-d4a9-4e27-a911-b09007ba589f",
                  "parentUUID": "879c44de-115e-4947-b4fe-82c72871b7af",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "primitive bigint obj",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: 1n };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);",
                  "err": {},
                  "uuid": "60cec83b-4cf9-400a-8329-f2495090b6b4",
                  "parentUUID": "879c44de-115e-4947-b4fe-82c72871b7af",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7f6dad48-d4a9-4e27-a911-b09007ba589f",
                "60cec83b-4cf9-400a-8329-f2495090b6b4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "54e84eac-73b2-4586-83ac-110f3acb81cc",
              "title": "number",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\primitive.test.ts",
              "file": "\\test\\primitive.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "normal",
                  "fullTitle": "primitive number normal",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = 1;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "a9cda65b-da1b-44ad-83e3-3d8a91d41f2d",
                  "parentUUID": "54e84eac-73b2-4586-83ac-110f3acb81cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "NaN",
                  "fullTitle": "primitive number NaN",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number.NaN;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.isNaN(actual);",
                  "err": {},
                  "uuid": "31afcb6f-9e8a-44ea-8e01-2a91e1df0d27",
                  "parentUUID": "54e84eac-73b2-4586-83ac-110f3acb81cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "-0",
                  "fullTitle": "primitive number -0",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = -0;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notDeepEqual(actual, 0);",
                  "err": {},
                  "uuid": "6a09ba88-9dda-49ae-8812-21817097f5c3",
                  "parentUUID": "54e84eac-73b2-4586-83ac-110f3acb81cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "EPSILON",
                  "fullTitle": "primitive number EPSILON",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "314348fb-8a71-4644-8523-580c96db2041",
                  "parentUUID": "54e84eac-73b2-4586-83ac-110f3acb81cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "MAX_SAFE_INTEGER",
                  "fullTitle": "primitive number MAX_SAFE_INTEGER",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "7d526329-e3cc-4ca5-9557-19f1b2f01b4a",
                  "parentUUID": "54e84eac-73b2-4586-83ac-110f3acb81cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "MAX_VALUE",
                  "fullTitle": "primitive number MAX_VALUE",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "f8b5ebef-64a7-46c3-b40e-f53975e8e0cc",
                  "parentUUID": "54e84eac-73b2-4586-83ac-110f3acb81cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "MIN_SAFE_INTEGER",
                  "fullTitle": "primitive number MIN_SAFE_INTEGER",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "0b3d70d3-0bf1-46a7-ba8c-800ebb04d3c5",
                  "parentUUID": "54e84eac-73b2-4586-83ac-110f3acb81cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "MIN_VALUE",
                  "fullTitle": "primitive number MIN_VALUE",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "4f4fabe8-1d63-4b38-8635-f35925680c65",
                  "parentUUID": "54e84eac-73b2-4586-83ac-110f3acb81cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "NEGATIVE_INFINITY",
                  "fullTitle": "primitive number NEGATIVE_INFINITY",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "5c6c2b5c-194a-469b-ac47-e31ee45f796d",
                  "parentUUID": "54e84eac-73b2-4586-83ac-110f3acb81cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "POSITIVE_INFINITY",
                  "fullTitle": "primitive number POSITIVE_INFINITY",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "c1de2497-7d7b-4ec5-acf8-82a169c59bcd",
                  "parentUUID": "54e84eac-73b2-4586-83ac-110f3acb81cc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a9cda65b-da1b-44ad-83e3-3d8a91d41f2d",
                "31afcb6f-9e8a-44ea-8e01-2a91e1df0d27",
                "6a09ba88-9dda-49ae-8812-21817097f5c3",
                "314348fb-8a71-4644-8523-580c96db2041",
                "7d526329-e3cc-4ca5-9557-19f1b2f01b4a",
                "f8b5ebef-64a7-46c3-b40e-f53975e8e0cc",
                "0b3d70d3-0bf1-46a7-ba8c-800ebb04d3c5",
                "4f4fabe8-1d63-4b38-8635-f35925680c65",
                "5c6c2b5c-194a-469b-ac47-e31ee45f796d",
                "c1de2497-7d7b-4ec5-acf8-82a169c59bcd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "ad1ceb37-592b-46f2-9ee5-5ab234e223fe",
          "title": "Stringify Options",
          "fullFile": "D:\\works\\ts-project\\rich-json\\test\\StringifyOptions.test.ts",
          "file": "\\test\\StringifyOptions.test.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "pretty",
              "fullTitle": "Stringify Options pretty",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = { a: 1, b: 5, c: { d: true, e: false } };\nconst pretty = 5;\nconst expect = JSON.stringify(obj, null, pretty);\nconst actual = src_1.default.stringify(obj, { pretty }).replace(/\\n {5}/g, '\\n');\nchai_1.assert.include(actual, expect);",
              "err": {},
              "uuid": "1c2b9bda-8872-4bad-b94b-b08e239c2a43",
              "parentUUID": "ad1ceb37-592b-46f2-9ee5-5ab234e223fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "excludKeys string",
              "fullTitle": "Stringify Options excludKeys string",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = { a: 1, b: 5, c: { d: true, e: false } };\nconst expect = { a: 1, c: { d: true } };\nconst actual = src_1.default.clone(obj, { excludKeys: ['b', 'e'] });\nchai_1.assert.deepEqual(actual, expect);",
              "err": {},
              "uuid": "0ccae19e-694b-4a1f-aa68-1b4c71f66d01",
              "parentUUID": "ad1ceb37-592b-46f2-9ee5-5ab234e223fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "excludKeys RegExp",
              "fullTitle": "Stringify Options excludKeys RegExp",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = { a: 1, b: 5, c: { d: true, e: false } };\nconst expect = { a: 1, c: { d: true } };\nconst actual = src_1.default.clone(obj, { excludKeys: /^b|e$/ });\nchai_1.assert.deepEqual(actual, expect);",
              "err": {},
              "uuid": "b2cbb79e-4aff-4f23-bc4a-0afe3a6922fe",
              "parentUUID": "ad1ceb37-592b-46f2-9ee5-5ab234e223fe",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "excludKeys mix",
              "fullTitle": "Stringify Options excludKeys mix",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const obj = { a: 1, b: 5, c: { d: true, e: false } };\nconst expect = { c: { d: true } };\nconst actual = src_1.default.clone(obj, { excludKeys: ['a', /^b|e$/] });\nchai_1.assert.deepEqual(actual, expect);",
              "err": {},
              "uuid": "ac434544-6a16-4e8e-9b2e-3fad66f4c880",
              "parentUUID": "ad1ceb37-592b-46f2-9ee5-5ab234e223fe",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1c2b9bda-8872-4bad-b94b-b08e239c2a43",
            "0ccae19e-694b-4a1f-aa68-1b4c71f66d01",
            "b2cbb79e-4aff-4f23-bc4a-0afe3a6922fe",
            "ac434544-6a16-4e8e-9b2e-3fad66f4c880"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "docs",
        "reportTitle": "@rickyli79/rich-json v1.1.3",
        "reportPageTitle": "@rickyli79/rich-json report",
        "reportFilename": "index"
      },
      "version": "6.2.0"
    }
  }
}