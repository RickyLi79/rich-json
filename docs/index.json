{
  "stats": {
    "suites": 19,
    "tests": 68,
    "passes": 68,
    "pending": 0,
    "failures": 0,
    "start": "2024-03-02T13:12:42.188Z",
    "end": "2024-03-02T13:12:42.237Z",
    "duration": 49,
    "testsRegistered": 68,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1f6c4206-a776-461a-9e82-662f734e8059",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "19af3382-d276-469a-b940-7d5879947977",
          "title": "buildin serializers",
          "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
          "file": "\\test\\buildin-serializers.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"buildin serializers\"",
              "fullTitle": "buildin serializers \"before each\" hook in \"buildin serializers\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "src_1.default.resetCustomerSerializers();",
              "err": {},
              "uuid": "8b0e18e4-b96d-4331-a527-8f4fa5d876f4",
              "parentUUID": "19af3382-d276-469a-b940-7d5879947977",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9ec2490b-b7e6-4603-8b20-f89f8bd4a867",
              "title": "Date",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "buildin serializers Date plain",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Date();\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Date);",
                  "err": {},
                  "uuid": "2b44cb76-8bca-4641-aed9-b15d13d85384",
                  "parentUUID": "9ec2490b-b7e6-4603-8b20-f89f8bd4a867",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "buildin serializers Date obj",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Date() };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Date);",
                  "err": {},
                  "uuid": "016d6950-b64c-4e45-b8e7-3ac9c4fa4090",
                  "parentUUID": "9ec2490b-b7e6-4603-8b20-f89f8bd4a867",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2b44cb76-8bca-4641-aed9-b15d13d85384",
                "016d6950-b64c-4e45-b8e7-3ac9c4fa4090"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            },
            {
              "uuid": "b37a9353-97b7-44a4-99e5-65372c4052e9",
              "title": "URL",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "buildin serializers URL plain",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new URL('http://abc.def?q=1&3#213');\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, URL);",
                  "err": {},
                  "uuid": "a8b3ecd7-dfea-4358-8365-579cd694cfb5",
                  "parentUUID": "b37a9353-97b7-44a4-99e5-65372c4052e9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "buildin serializers URL obj",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Date() };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Date);",
                  "err": {},
                  "uuid": "0eeff48a-71d5-483b-bf87-c6b43b81c28b",
                  "parentUUID": "b37a9353-97b7-44a4-99e5-65372c4052e9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a8b3ecd7-dfea-4358-8365-579cd694cfb5",
                "0eeff48a-71d5-483b-bf87-c6b43b81c28b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            },
            {
              "uuid": "860d4266-4b7a-451a-9952-12588227bba4",
              "title": "Error",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "#1",
                  "fullTitle": "buildin serializers Error #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Error('my message');\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.name, expect.name);\nchai_1.assert.deepEqual(actual.message, expect.message);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Error);",
                  "err": {},
                  "uuid": "d0f51624-842c-4239-b61b-8ec1b8789cf1",
                  "parentUUID": "860d4266-4b7a-451a-9952-12588227bba4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "#2",
                  "fullTitle": "buildin serializers Error #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let expect;\ntry {\n    ({}.a.b.c = 1);\n}\ncatch (e) {\n    expect = e;\n}\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.name, expect.name);\nchai_1.assert.deepEqual(actual.message, expect.message);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, TypeError);",
                  "err": {},
                  "uuid": "703dca2a-c5de-40e0-9653-e8d105bf3378",
                  "parentUUID": "860d4266-4b7a-451a-9952-12588227bba4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d0f51624-842c-4239-b61b-8ec1b8789cf1",
                "703dca2a-c5de-40e0-9653-e8d105bf3378"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            },
            {
              "uuid": "2da71da4-73b2-4225-a6f8-4e1ee2690cda",
              "title": "RegExp",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain without flag",
                  "fullTitle": "buildin serializers RegExp plain without flag",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = /RegExp/;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, RegExp);",
                  "err": {},
                  "uuid": "2bdec07e-54a7-48ec-9865-6b82283146d6",
                  "parentUUID": "2da71da4-73b2-4225-a6f8-4e1ee2690cda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain with flag",
                  "fullTitle": "buildin serializers RegExp plain with flag",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = /RegExp/ig;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, RegExp);",
                  "err": {},
                  "uuid": "a7104467-689a-41b3-96ee-aa8fb5521cf8",
                  "parentUUID": "2da71da4-73b2-4225-a6f8-4e1ee2690cda",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "buildin serializers RegExp obj",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: /RegExp/ };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, RegExp);",
                  "err": {},
                  "uuid": "ec958e05-4ab8-46c7-a013-47dd66d7196a",
                  "parentUUID": "2da71da4-73b2-4225-a6f8-4e1ee2690cda",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2bdec07e-54a7-48ec-9865-6b82283146d6",
                "a7104467-689a-41b3-96ee-aa8fb5521cf8",
                "ec958e05-4ab8-46c7-a013-47dd66d7196a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            },
            {
              "uuid": "02fc802f-5f6d-4a1c-8310-ca0d29309bc1",
              "title": "Set",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "buildin serializers Set plain",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Set([1, 2, 3]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Set);",
                  "err": {},
                  "uuid": "2121225e-5048-4a77-8011-7e916c370a79",
                  "parentUUID": "02fc802f-5f6d-4a1c-8310-ca0d29309bc1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "buildin serializers Set obj",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Set([1, 2, 3]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Set);",
                  "err": {},
                  "uuid": "99766a66-9111-43fd-a729-7a3c8fde9ed5",
                  "parentUUID": "02fc802f-5f6d-4a1c-8310-ca0d29309bc1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2121225e-5048-4a77-8011-7e916c370a79",
                "99766a66-9111-43fd-a729-7a3c8fde9ed5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            },
            {
              "uuid": "41894577-9e16-4f93-a440-388c2b87bf75",
              "title": "Map",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "buildin serializers Map plain",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Map([[1, 2], [3, 4]]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Map);",
                  "err": {},
                  "uuid": "d1084910-a797-4282-91fd-157facf84ef7",
                  "parentUUID": "41894577-9e16-4f93-a440-388c2b87bf75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "buildin serializers Map obj",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Map([[1, 2], [3, 4]]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Map);",
                  "err": {},
                  "uuid": "a94b6bf6-11b0-4e43-b6ff-800c64b072ab",
                  "parentUUID": "41894577-9e16-4f93-a440-388c2b87bf75",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d1084910-a797-4282-91fd-157facf84ef7",
                "a94b6bf6-11b0-4e43-b6ff-800c64b072ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            },
            {
              "uuid": "25d9b3f1-1f4f-4de8-90d8-d6489987dc16",
              "title": "Function",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain #1",
                  "fullTitle": "buildin serializers Function plain #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = function () { return 1; };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "cee8415b-f4dd-4aeb-9398-f74a9f1931ec",
                  "parentUUID": "25d9b3f1-1f4f-4de8-90d8-d6489987dc16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #1 async",
                  "fullTitle": "buildin serializers Function plain #1 async",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = async function () { return 1; };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "0bfb71ab-40ee-45fa-b06d-05da9da1712a",
                  "parentUUID": "25d9b3f1-1f4f-4de8-90d8-d6489987dc16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #2",
                  "fullTitle": "buildin serializers Function plain #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = () => { 0; };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "d365e298-1165-4529-b91c-8bff4b6354ed",
                  "parentUUID": "25d9b3f1-1f4f-4de8-90d8-d6489987dc16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #2 async",
                  "fullTitle": "buildin serializers Function plain #2 async",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = async () => { 0; };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "167389d9-8821-4e07-b229-fa5b497daa67",
                  "parentUUID": "25d9b3f1-1f4f-4de8-90d8-d6489987dc16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #3",
                  "fullTitle": "buildin serializers Function plain #3",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = a => a;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "bc43b2db-e550-4dc3-93a6-7664bd44b181",
                  "parentUUID": "25d9b3f1-1f4f-4de8-90d8-d6489987dc16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #3 async",
                  "fullTitle": "buildin serializers Function plain #3 async",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = async (a) => a;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Function);",
                  "err": {},
                  "uuid": "0c2c4073-d967-417f-a573-2aca08ac1b7d",
                  "parentUUID": "25d9b3f1-1f4f-4de8-90d8-d6489987dc16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #1",
                  "fullTitle": "buildin serializers Function obj #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a() { return 1; } };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "c64a78f9-1ff7-4433-9379-085432f6905b",
                  "parentUUID": "25d9b3f1-1f4f-4de8-90d8-d6489987dc16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #1 async",
                  "fullTitle": "buildin serializers Function obj #1 async",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { async a() { return 1; } };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "e54117fd-ceae-4daa-99ed-9a626a4765b0",
                  "parentUUID": "25d9b3f1-1f4f-4de8-90d8-d6489987dc16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #2",
                  "fullTitle": "buildin serializers Function obj #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: () => { 0; } };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "ecc5e70c-2eb5-4bcb-946f-63d8673e52ae",
                  "parentUUID": "25d9b3f1-1f4f-4de8-90d8-d6489987dc16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #2 async",
                  "fullTitle": "buildin serializers Function obj #2 async",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: async () => { 0; } };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "3def1d5c-f41a-4372-a126-507999ba7ee7",
                  "parentUUID": "25d9b3f1-1f4f-4de8-90d8-d6489987dc16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #3",
                  "fullTitle": "buildin serializers Function obj #3",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: a => a };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "992ce46a-3566-4529-8a45-6ed94bceeea7",
                  "parentUUID": "25d9b3f1-1f4f-4de8-90d8-d6489987dc16",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj #3 async",
                  "fullTitle": "buildin serializers Function obj #3 async",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: async (a) => a };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.a.toString(), expect.a.toString());\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Function);",
                  "err": {},
                  "uuid": "420d56bc-8e07-4100-a607-e839b9d714e7",
                  "parentUUID": "25d9b3f1-1f4f-4de8-90d8-d6489987dc16",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cee8415b-f4dd-4aeb-9398-f74a9f1931ec",
                "0bfb71ab-40ee-45fa-b06d-05da9da1712a",
                "d365e298-1165-4529-b91c-8bff4b6354ed",
                "167389d9-8821-4e07-b229-fa5b497daa67",
                "bc43b2db-e550-4dc3-93a6-7664bd44b181",
                "0c2c4073-d967-417f-a573-2aca08ac1b7d",
                "c64a78f9-1ff7-4433-9379-085432f6905b",
                "e54117fd-ceae-4daa-99ed-9a626a4765b0",
                "ecc5e70c-2eb5-4bcb-946f-63d8673e52ae",
                "3def1d5c-f41a-4372-a126-507999ba7ee7",
                "992ce46a-3566-4529-8a45-6ed94bceeea7",
                "420d56bc-8e07-4100-a607-e839b9d714e7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            },
            {
              "uuid": "cc4f00fe-1476-4f68-ab44-9158c3fd5ed1",
              "title": "Buffer",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain Buffer",
                  "fullTitle": "buildin serializers Buffer plain Buffer",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Buffer.from([72, 101, 108, 108, 111]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Buffer);",
                  "err": {},
                  "uuid": "48b854cd-442a-4490-8d7c-2289ea8a2e19",
                  "parentUUID": "cc4f00fe-1476-4f68-ab44-9158c3fd5ed1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain Uint8Array",
                  "fullTitle": "buildin serializers Buffer plain Uint8Array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Uint8Array([72, 101, 108, 108, 111]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Uint8Array);",
                  "err": {},
                  "uuid": "24a4709b-50b6-4411-b976-56d3dd302d53",
                  "parentUUID": "cc4f00fe-1476-4f68-ab44-9158c3fd5ed1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain Uint16Array",
                  "fullTitle": "buildin serializers Buffer plain Uint16Array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Uint16Array([72, 101, 108, 108, 111]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Uint16Array);",
                  "err": {},
                  "uuid": "95ff3add-747f-4cbb-9d13-aa0f367a1314",
                  "parentUUID": "cc4f00fe-1476-4f68-ab44-9158c3fd5ed1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain Uint32Array",
                  "fullTitle": "buildin serializers Buffer plain Uint32Array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Uint32Array([72, 101, 108, 108, 111]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Uint32Array);",
                  "err": {},
                  "uuid": "f7b348b0-2e45-41c6-94c0-82369fa8b5b3",
                  "parentUUID": "cc4f00fe-1476-4f68-ab44-9158c3fd5ed1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain Int32Array",
                  "fullTitle": "buildin serializers Buffer plain Int32Array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = new Int32Array([72, 101, 108, 108, 111]);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual.toString(), expect.toString());\nchai_1.assert.notStrictEqual(actual, expect);\nchai_1.assert.instanceOf(actual, Int32Array);",
                  "err": {},
                  "uuid": "ec0a09c7-6ee6-42de-9c25-54af2b0554b1",
                  "parentUUID": "cc4f00fe-1476-4f68-ab44-9158c3fd5ed1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj Buffer",
                  "fullTitle": "buildin serializers Buffer obj Buffer",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: Buffer.from([72, 101, 108, 108, 111]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Buffer);",
                  "err": {},
                  "uuid": "24ec5128-7c0c-4512-81f7-da6f61ca1e1f",
                  "parentUUID": "cc4f00fe-1476-4f68-ab44-9158c3fd5ed1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj Uint8Array",
                  "fullTitle": "buildin serializers Buffer obj Uint8Array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Uint8Array([72, 101, 108, 108, 111]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Uint8Array);",
                  "err": {},
                  "uuid": "10d6f5d8-1dfa-4cd1-9024-1c6df7662461",
                  "parentUUID": "cc4f00fe-1476-4f68-ab44-9158c3fd5ed1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj Uint16Array",
                  "fullTitle": "buildin serializers Buffer obj Uint16Array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Uint16Array([72, 101, 108, 108, 111]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Uint16Array);",
                  "err": {},
                  "uuid": "bc6f7bf0-ad30-4fbb-9466-a8f36dbcadc2",
                  "parentUUID": "cc4f00fe-1476-4f68-ab44-9158c3fd5ed1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj Uint32Array",
                  "fullTitle": "buildin serializers Buffer obj Uint32Array",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: new Uint32Array([72, 101, 108, 108, 111]) };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual.a, expect.a);\nchai_1.assert.instanceOf(actual.a, Uint32Array);",
                  "err": {},
                  "uuid": "f455d8a5-b93a-458f-b492-b41d8945c967",
                  "parentUUID": "cc4f00fe-1476-4f68-ab44-9158c3fd5ed1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "48b854cd-442a-4490-8d7c-2289ea8a2e19",
                "24a4709b-50b6-4411-b976-56d3dd302d53",
                "95ff3add-747f-4cbb-9d13-aa0f367a1314",
                "f7b348b0-2e45-41c6-94c0-82369fa8b5b3",
                "ec0a09c7-6ee6-42de-9c25-54af2b0554b1",
                "24ec5128-7c0c-4512-81f7-da6f61ca1e1f",
                "10d6f5d8-1dfa-4cd1-9024-1c6df7662461",
                "bc6f7bf0-ad30-4fbb-9466-a8f36dbcadc2",
                "f455d8a5-b93a-458f-b492-b41d8945c967"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            },
            {
              "uuid": "d0578d35-62f7-4631-871d-1b965fb39942",
              "title": "WrapRunner",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\buildin-serializers.test.ts",
              "file": "\\test\\buildin-serializers.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain #1",
                  "fullTitle": "buildin serializers WrapRunner plain #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "function add(a, b) {\n    return a + b;\n}\nconst expect = new src_1.default.WrapRunner(add, 1, 2);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.instanceOf(actual, src_1.default.WrapRunner);\nchai_1.assert.deepEqual(actual.run(), 3);",
                  "err": {},
                  "uuid": "474715e8-bc22-48d8-a93e-abc0a83078fa",
                  "parentUUID": "d0578d35-62f7-4631-871d-1b965fb39942",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #1 Promise",
                  "fullTitle": "buildin serializers WrapRunner plain #1 Promise",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "function add(a, b) {\n    return Promise.resolve(a + b);\n}\nconst expect = new src_1.default.WrapRunner(add, 1, 2);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.instanceOf(actual, src_1.default.WrapRunner);\nconst called = actual.run();\nchai_1.assert.instanceOf(called, Promise);\nchai_1.assert.deepEqual(await called, 3);",
                  "err": {},
                  "uuid": "3d698239-18f1-4086-9522-419f4c6b0019",
                  "parentUUID": "d0578d35-62f7-4631-871d-1b965fb39942",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "plain #2 whih `this`",
                  "fullTitle": "buildin serializers WrapRunner plain #2 whih `this`",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "function add(a, b) {\n    return (this ?? 0) + a + b;\n}\nconst expect = new src_1.default.WrapRunner(add, 1, 2);\nconst actual = src_1.default.clone(expect);\nchai_1.assert.instanceOf(actual, src_1.default.WrapRunner);\nchai_1.assert.deepEqual(actual.run(), 3);\nchai_1.assert.deepEqual(actual.run(5), 8);\nchai_1.assert.deepEqual(actual.run(-1), 2);\n// assert.deepEqual(actual.call('0'), '012');",
                  "err": {},
                  "uuid": "38049941-e035-49cf-8925-82f45107e6ac",
                  "parentUUID": "d0578d35-62f7-4631-871d-1b965fb39942",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "474715e8-bc22-48d8-a93e-abc0a83078fa",
                "3d698239-18f1-4086-9522-419f4c6b0019",
                "38049941-e035-49cf-8925-82f45107e6ac"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "8c2464f5-92b7-4167-8512-52247be2c621",
          "title": "complex",
          "fullFile": "D:\\works\\ts-project\\rich-json\\test\\complex.test.ts",
          "file": "\\test\\complex.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"complex\"",
              "fullTitle": "complex \"before each\" hook in \"complex\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "src_1.default.resetCustomerSerializers();",
              "err": {},
              "uuid": "2b753c09-0f23-440f-9eea-58017bc133b7",
              "parentUUID": "8c2464f5-92b7-4167-8512-52247be2c621",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"complex\"",
              "fullTitle": "complex \"before each\" hook in \"complex\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "actual = src_1.default.clone(expect);",
              "err": {},
              "uuid": "bd8f0088-7a63-42b9-85ba-ab79b89f0a89",
              "parentUUID": "8c2464f5-92b7-4167-8512-52247be2c621",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9f5ef4ca-d8d5-4946-b5a9-18fcbdaf6d43",
              "title": "circle",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\complex.test.ts",
              "file": "\\test\\complex.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "root",
                  "fullTitle": "complex circle root",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.circle.root, actual);",
                  "err": {},
                  "uuid": "a2d6e985-d826-4e50-9047-883801ad0a88",
                  "parentUUID": "9f5ef4ca-d8d5-4946-b5a9-18fcbdaf6d43",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "circle",
                  "fullTitle": "complex circle circle",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.circle.circle.circle, actual.circle);",
                  "err": {},
                  "uuid": "e69d7db0-8b6c-47a8-afc6-1b270fbf5037",
                  "parentUUID": "9f5ef4ca-d8d5-4946-b5a9-18fcbdaf6d43",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a2d6e985-d826-4e50-9047-883801ad0a88",
                "e69d7db0-8b6c-47a8-afc6-1b270fbf5037"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            },
            {
              "uuid": "5c6432c3-dde3-4777-825b-df616ac7cbb8",
              "title": "$ref",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\complex.test.ts",
              "file": "\\test\\complex.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "function",
                  "fullTitle": "complex $ref function",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.c, actual.c);",
                  "err": {},
                  "uuid": "c6e387a2-5bc5-4d4b-b529-7afb60c1b333",
                  "parentUUID": "5c6432c3-dde3-4777-825b-df616ac7cbb8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "object",
                  "fullTitle": "complex $ref object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.d, actual.d);\nchai_1.assert.notStrictEqual(actual.$ref.d, obj);",
                  "err": {},
                  "uuid": "9c3d6dea-980b-4b95-afa9-3dee0053b0c9",
                  "parentUUID": "5c6432c3-dde3-4777-825b-df616ac7cbb8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "member of Set #1",
                  "fullTitle": "complex $ref member of Set #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.e, actual.e);\nconst value = Array.from(actual.$ref.e)[0];\nchai_1.assert.strictEqual(value, actual.d);",
                  "err": {},
                  "uuid": "4a2a177a-4594-49a4-8bd6-8e47fb55ac07",
                  "parentUUID": "5c6432c3-dde3-4777-825b-df616ac7cbb8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "member of Set #2",
                  "fullTitle": "complex $ref member of Set #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const value = Array.from(actual.$ref.g)[0];\nchai_1.assert.strictEqual(value, actual.g);",
                  "err": {},
                  "uuid": "a63951d4-12a2-4b64-8a12-9422a3740e59",
                  "parentUUID": "5c6432c3-dde3-4777-825b-df616ac7cbb8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "member of Map #1",
                  "fullTitle": "complex $ref member of Map #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.f, actual.f);\nconst key = Array.from(actual.$ref.f.entries())[0][0];\nchai_1.assert.strictEqual(key, actual.d);\nconst value = Array.from(actual.$ref.f.entries())[1][1];\nchai_1.assert.strictEqual(value, actual.d);",
                  "err": {},
                  "uuid": "d9aab670-c20f-497c-84c7-3de6828e8618",
                  "parentUUID": "5c6432c3-dde3-4777-825b-df616ac7cbb8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "member of Map #2",
                  "fullTitle": "complex $ref member of Map #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const key = Array.from(actual.$ref.gg.entries())[0][0];\nchai_1.assert.strictEqual(key, actual.g);\nconst value = Array.from(actual.$ref.gg.entries())[1][1];\nchai_1.assert.strictEqual(value, actual.g);",
                  "err": {},
                  "uuid": "5fd5674d-6acd-4ea7-be1b-8e295638906b",
                  "parentUUID": "5c6432c3-dde3-4777-825b-df616ac7cbb8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "buffer",
                  "fullTitle": "complex $ref buffer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.h, actual.h);\nchai_1.assert.notStrictEqual(actual.$ref.h, buffer);",
                  "err": {},
                  "uuid": "2ab7f602-7afe-405c-8639-d51d13050e54",
                  "parentUUID": "5c6432c3-dde3-4777-825b-df616ac7cbb8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "class #1",
                  "fullTitle": "complex $ref class #1",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.g0, actual.g);\nchai_1.assert.notStrictEqual(actual.$ref.g0, obj2);",
                  "err": {},
                  "uuid": "cf934ae9-ee97-4cae-9d94-1c46d476e130",
                  "parentUUID": "5c6432c3-dde3-4777-825b-df616ac7cbb8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "class #2",
                  "fullTitle": "complex $ref class #2",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.g0.ref, actual.d);\nchai_1.assert.notStrictEqual(actual.$ref.g0.ref, obj2);",
                  "err": {},
                  "uuid": "4ce482e5-6be0-4fe0-b515-8538b501d707",
                  "parentUUID": "5c6432c3-dde3-4777-825b-df616ac7cbb8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "class #3 - in Set",
                  "fullTitle": "complex $ref class #3 - in Set",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "chai_1.assert.strictEqual(actual.$ref.i, actual.i);\nconst value = Array.from(actual.$ref.i)[0];\nchai_1.assert.strictEqual(value, actual.g);\nchai_1.assert.strictEqual(value.ref, actual.d);",
                  "err": {},
                  "uuid": "48670af4-fff5-469e-a437-1dff9299cf7c",
                  "parentUUID": "5c6432c3-dde3-4777-825b-df616ac7cbb8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c6e387a2-5bc5-4d4b-b529-7afb60c1b333",
                "9c3d6dea-980b-4b95-afa9-3dee0053b0c9",
                "4a2a177a-4594-49a4-8bd6-8e47fb55ac07",
                "a63951d4-12a2-4b64-8a12-9422a3740e59",
                "d9aab670-c20f-497c-84c7-3de6828e8618",
                "5fd5674d-6acd-4ea7-be1b-8e295638906b",
                "2ab7f602-7afe-405c-8639-d51d13050e54",
                "cf934ae9-ee97-4cae-9d94-1c46d476e130",
                "4ce482e5-6be0-4fe0-b515-8538b501d707",
                "48670af4-fff5-469e-a437-1dff9299cf7c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "7adf86f1-71e7-4f3f-8d3c-c66ea5d2ea1f",
          "title": "customerSerializers",
          "fullFile": "D:\\works\\ts-project\\rich-json\\test\\customerSerializers.test.ts",
          "file": "\\test\\customerSerializers.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"customerSerializers\"",
              "fullTitle": "customerSerializers \"before each\" hook in \"customerSerializers\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "src_1.default.resetCustomerSerializers();",
              "err": {},
              "uuid": "134034f8-4828-4928-9d46-4964410fa6be",
              "parentUUID": "7adf86f1-71e7-4f3f-8d3c-c66ea5d2ea1f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "base",
              "fullTitle": "customerSerializers base",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "src_1.default.addCustomerSerializer({\n    className: 'abc',\n    class: MyClass,\n    toContent: value => ({ abc: value.data }),\n    fromContent: json => {\n        return MyClass.create(json.abc);\n    },\n});\nconst acutal = src_1.default.clone(obj);\nconst expect = obj;\nchai_1.assert.deepEqual(acutal, expect);\nchai_1.assert.instanceOf(acutal.key5, MyClass);",
              "err": {},
              "uuid": "6bd1cfe8-b6c5-4647-a4e8-5fc2ab8f35b3",
              "parentUUID": "7adf86f1-71e7-4f3f-8d3c-c66ea5d2ea1f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "toJSON SHOULD NOT change after convert",
              "fullTitle": "customerSerializers toJSON SHOULD NOT change after convert",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let counter = 0;\nclass Clz {\n    data = 0;\n    toJSON() {\n        return counter++;\n    }\n}\nconst inst = new Clz();\ninst.data = 5;\nconst stage1 = JSON.stringify(inst);\nchai_1.assert.equal(counter, 1);\nchai_1.assert.equal('0', stage1);\nsrc_1.default.addCustomerSerializer({\n    class: Clz,\n    toContent: value => value.data,\n    fromContent: json => { const inst = new Clz(); inst.data = json; return inst; },\n});\nconst inst2 = src_1.default.clone(inst);\nchai_1.assert.equal(inst2.data, inst.data);\nchai_1.assert.notEqual(inst2.data, 0);\nchai_1.assert.equal(counter, 1);\nconst stage2 = JSON.stringify(inst);\nchai_1.assert.equal(counter, 2);\nchai_1.assert.equal('1', stage2);",
              "err": {},
              "uuid": "02d4b84c-42bb-4a1b-bce7-b8f0c1d2c82c",
              "parentUUID": "7adf86f1-71e7-4f3f-8d3c-c66ea5d2ea1f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "SHOULD NOT add duplicate converter",
              "fullTitle": "customerSerializers SHOULD NOT add duplicate converter",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "class Clz {\n}\nchai_1.assert.doesNotThrow(() => {\n    src_1.default.addCustomerSerializer({\n        class: Clz,\n        fromContent: null,\n        toContent: null,\n    });\n});\nchai_1.assert.Throw(() => {\n    src_1.default.addCustomerSerializer({\n        class: Clz,\n        fromContent: null,\n        toContent: null,\n    });\n});\nchai_1.assert.Throw(() => {\n    src_1.default.addCustomerSerializer({\n        className: 'Clz',\n        class: null,\n        fromContent: null,\n        toContent: null,\n    });\n});\nchai_1.assert.doesNotThrow(() => {\n    src_1.default.addCustomerSerializer({\n        className: 'Clz2',\n        class: Clz,\n        fromContent: null,\n        toContent: null,\n    });\n});",
              "err": {},
              "uuid": "85343c74-8406-41cd-9aae-57337300c3d9",
              "parentUUID": "7adf86f1-71e7-4f3f-8d3c-c66ea5d2ea1f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6bd1cfe8-b6c5-4647-a4e8-5fc2ab8f35b3",
            "02d4b84c-42bb-4a1b-bce7-b8f0c1d2c82c",
            "85343c74-8406-41cd-9aae-57337300c3d9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        },
        {
          "uuid": "efd0eb37-f418-4999-8f8a-d01ceeec0616",
          "title": "primitive",
          "fullFile": "D:\\works\\ts-project\\rich-json\\test\\primitive.test.ts",
          "file": "\\test\\primitive.test.ts",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"primitive\"",
              "fullTitle": "primitive \"before each\" hook in \"primitive\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "src_1.default.resetCustomerSerializers();",
              "err": {},
              "uuid": "3a87affb-244f-4042-bce3-8f98534f3cbe",
              "parentUUID": "efd0eb37-f418-4999-8f8a-d01ceeec0616",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4d2b0955-f1f7-4a9d-91a7-87566c23376a",
              "title": "null",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\primitive.test.ts",
              "file": "\\test\\primitive.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "primitive null plain",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = null;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "8c6f30ea-616b-4ef7-b6f1-1a9daee34212",
                  "parentUUID": "4d2b0955-f1f7-4a9d-91a7-87566c23376a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "primitive null obj",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: null };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notStrictEqual(actual, expect);",
                  "err": {},
                  "uuid": "0386c271-10b9-4bec-b971-d9c629e8c49f",
                  "parentUUID": "4d2b0955-f1f7-4a9d-91a7-87566c23376a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8c6f30ea-616b-4ef7-b6f1-1a9daee34212",
                "0386c271-10b9-4bec-b971-d9c629e8c49f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            },
            {
              "uuid": "9753a61c-50dd-4a89-b27d-3f994682e30f",
              "title": "undefined",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\primitive.test.ts",
              "file": "\\test\\primitive.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "primitive undefined plain",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = undefined;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "19d3ca95-c4f6-4c14-b640-ce7c79883218",
                  "parentUUID": "9753a61c-50dd-4a89-b27d-3f994682e30f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "primitive undefined obj",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: undefined };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, {});\nchai_1.assert.notStrictEqual(actual, expect);",
                  "err": {},
                  "uuid": "be080af8-f472-47d1-8c31-3af2be0adf65",
                  "parentUUID": "9753a61c-50dd-4a89-b27d-3f994682e30f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "19d3ca95-c4f6-4c14-b640-ce7c79883218",
                "be080af8-f472-47d1-8c31-3af2be0adf65"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            },
            {
              "uuid": "6dc1e26b-5b90-476a-af4a-4c17cdade5c1",
              "title": "bigint",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\primitive.test.ts",
              "file": "\\test\\primitive.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "plain",
                  "fullTitle": "primitive bigint plain",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = 1n;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "79743178-03d9-45f6-8d39-dbb098ea3aad",
                  "parentUUID": "6dc1e26b-5b90-476a-af4a-4c17cdade5c1",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "obj",
                  "fullTitle": "primitive bigint obj",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = { a: 1n };\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);",
                  "err": {},
                  "uuid": "b3636949-390d-4b2f-8d55-d71f75c45f26",
                  "parentUUID": "6dc1e26b-5b90-476a-af4a-4c17cdade5c1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "79743178-03d9-45f6-8d39-dbb098ea3aad",
                "b3636949-390d-4b2f-8d55-d71f75c45f26"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            },
            {
              "uuid": "3b3b5d23-f273-4089-8468-297cdcddf3d5",
              "title": "number",
              "fullFile": "D:\\works\\ts-project\\rich-json\\test\\primitive.test.ts",
              "file": "\\test\\primitive.test.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "normal",
                  "fullTitle": "primitive number normal",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = 1;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "d7303f99-51af-421e-a25a-d11f756f469d",
                  "parentUUID": "3b3b5d23-f273-4089-8468-297cdcddf3d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "NaN",
                  "fullTitle": "primitive number NaN",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number.NaN;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.isNaN(actual);",
                  "err": {},
                  "uuid": "68f449fd-8b30-453a-9669-1495627ff568",
                  "parentUUID": "3b3b5d23-f273-4089-8468-297cdcddf3d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "-0",
                  "fullTitle": "primitive number -0",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = -0;\nconst actual = src_1.default.clone(expect);\nchai_1.assert.deepEqual(actual, expect);\nchai_1.assert.notDeepEqual(actual, 0);",
                  "err": {},
                  "uuid": "db0c3748-ba19-499b-8b43-e24e5c618611",
                  "parentUUID": "3b3b5d23-f273-4089-8468-297cdcddf3d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "EPSILON",
                  "fullTitle": "primitive number EPSILON",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "7210ca04-7873-4db3-a590-563521bb4433",
                  "parentUUID": "3b3b5d23-f273-4089-8468-297cdcddf3d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "MAX_SAFE_INTEGER",
                  "fullTitle": "primitive number MAX_SAFE_INTEGER",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "ca58c8d2-57f2-4fb1-abd0-5970aa55ed67",
                  "parentUUID": "3b3b5d23-f273-4089-8468-297cdcddf3d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "MAX_VALUE",
                  "fullTitle": "primitive number MAX_VALUE",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "5594fb6f-fce1-4c48-ada9-1500e100bc24",
                  "parentUUID": "3b3b5d23-f273-4089-8468-297cdcddf3d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "MIN_SAFE_INTEGER",
                  "fullTitle": "primitive number MIN_SAFE_INTEGER",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "076a6886-0001-4ecd-9bbd-9cf82153acc4",
                  "parentUUID": "3b3b5d23-f273-4089-8468-297cdcddf3d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "MIN_VALUE",
                  "fullTitle": "primitive number MIN_VALUE",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "cb01b886-0134-403d-9dbc-391a06d3c07d",
                  "parentUUID": "3b3b5d23-f273-4089-8468-297cdcddf3d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "NEGATIVE_INFINITY",
                  "fullTitle": "primitive number NEGATIVE_INFINITY",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "825100c1-3e31-422a-8f86-5b9e6679c2c1",
                  "parentUUID": "3b3b5d23-f273-4089-8468-297cdcddf3d5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "POSITIVE_INFINITY",
                  "fullTitle": "primitive number POSITIVE_INFINITY",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const expect = Number[i];\nconst actual = src_1.default.clone(expect);\nchai_1.assert.equal(actual, expect);",
                  "err": {},
                  "uuid": "a14b08dd-6bdf-485e-8600-e1cbecd7970c",
                  "parentUUID": "3b3b5d23-f273-4089-8468-297cdcddf3d5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d7303f99-51af-421e-a25a-d11f756f469d",
                "68f449fd-8b30-453a-9669-1495627ff568",
                "db0c3748-ba19-499b-8b43-e24e5c618611",
                "7210ca04-7873-4db3-a590-563521bb4433",
                "ca58c8d2-57f2-4fb1-abd0-5970aa55ed67",
                "5594fb6f-fce1-4c48-ada9-1500e100bc24",
                "076a6886-0001-4ecd-9bbd-9cf82153acc4",
                "cb01b886-0134-403d-9dbc-391a06d3c07d",
                "825100c1-3e31-422a-8f86-5b9e6679c2c1",
                "a14b08dd-6bdf-485e-8600-e1cbecd7970c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 0
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 0
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.3.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "index",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "docs",
        "reportTitle": "Rich-JSON",
        "reportPageTitle": "Rich-JSON-report",
        "reportFilename": "index",
        "autoOpen": "true"
      },
      "version": "6.2.0"
    }
  }
}